{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACa;AAC4C;AACzD;AACA;AACA;AACA;AACA;AACe;AACfaAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,mCAAmC,gBAAgB,UAAU,0BAA0B,mBAAmB,6BAA6B;AACvI;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,gDAAgD;AAC1D,UAAU,wDAAwD;AAClE,UAAU,sDAAsD;AAChE,UAAU,4DAA4D;AACtE,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrwDAAe;AACrB;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACncA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA,iEAAe,YAAY,EAAC;;;;;;;;;;;;;;;;;;AClBiB;AACa;AAC1D;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACO;AACP;AACA;AACA;AACA,IAAI,4DAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,OAAO;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,KAAK;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,mBAAmB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,4DAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,iEAAe,YAAY,EAAC;;;;;;;;;;;;;;;;AC1I5B;AACyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,sBAAsB;AACjF,QAAQ;AACR;AACA;AACA,2DAA2D,sBAAsB;AACjF,QAAQ;AACR;AACA;AACA,2DAA2D,iBAAiB;AAC5E,QAAQ;AACR;AACA;AACA,2DAA2D,qBAAqB;AAChF,QAAQ;AACR;AACA;AACA,2DAA2D,qBAAqB;AAChF,QAAQ;AACR;AACA;AACA,2DAA2D,kBAAkB;AAC7E,QAAQ;AACR;AACA;AACA,2DAA2D,kBAAkB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA,kDAAkD,gBAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAU;AAClB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;AClQpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,IAAI,cAAc,EAAE,aAAa,EAAE,UAAU,EAAE;AAC5E;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB,yCAAyC,qBAAqB;AAC9F;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA,mDAAmD,cAAc;AACjE,WAAW;AACX;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe,iBAAiB,yCAAyC,eAAe;AACxF;AACA,qCAAqC,qBAAqB;AAC1D,uDAAuD;AACvD,kEAAkE,SAAS,GAAG,UAAU,OAAO,OAAO;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA,eAAe;AACf,MAAM;AACN;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,qBAAqB;AACrB;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA,+CAA+C,gBAAgB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;ACjO1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,eAAe;AAC9B,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY,SAAS,SAAS;AAClD,0CAA0C,WAAW;AACrD,wCAAwC,iBAAiB;AACzD;AACA;AACA;AACA,gDAAgD,WAAW;AAC3D;AACA;AACA,yDAAyD,SAAS;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,IAAI,YAAY,WAAW;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uCAAuC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,UAAU,WAAW;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,iEAAe,KAAK,EAAC;;;;;;;;;;;;;;;;ACpKrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,gBAAgB;AAC5D;AACA;AACA;AACA,4CAA4C,eAAe;AAC3D;AACA;AACA;AACA;AACA,gDAAgD,kBAAkB,uCAAuC,qBAAqB;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,WAAW;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,IAAI,KAA6B;AACjC;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;AC9EzB;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACvDmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,iBAAiB,mCAAmC,gBAAgB;AACpE;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,eAAe,GAAG;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,sBAAsB,mCAAmC,gBAAgB;AACzE;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,IAAI,oDAAS;AACb;AACA;AACA;AACA;AACA,sDAAsD;AACtD,sCAAsC,QAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qDAAU;AAChB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK,EAAC;;;;;;;;;;;;;;;ACvFriEAAe,aAAa,EAAC;;;;;;;;;;;;;;;AC3G7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,cAAc;AACd,kBAAkB;AAClB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,iDAAiD;AACjD,2CAA2C;AAC3C,kBAAkB;AAClB,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,mCAAmC;AACnC,qBAAqB;AACrB,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,sBAAsB;AACtB,0CAA0C;AAC1C,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,0BAA0B;AAC1B,mBAAmB;AACnB,mBAAmB;AACnB,uBAAuB;AACvB,yBAAyB;AACzB,mBAAmB;AACnB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,iEAAiE;AACjE,sCAAsC;AACtC,gDAAgD;AAChD,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,0BAA0B;AAC1B,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,2BAA2B;AAC3B,+CAA+C;AAC/C,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,cAAc,EAAC;;;;;;;;;;;;;;;;;;AC1I9B;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE,yDAAyD;AACzD,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK,EAAC;AACmB;;;;;;;;;;;;;;;ACtExC;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,YAAY,IAAI,WAAW;AACxD,6BAA6B,YAAY,IAAI,WAAW;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,WAAW;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,QAAQ;AACrB,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC7EA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,kBAAkB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,UAAU;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,UAAU;AAC9C;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;ACtDyB;AACnD;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,MAAM;AACnB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,aAAa,QAAQ;AACrB,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA,gDAAgD,gBAAgB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA,YAAY,mCAAmC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,kBAAkB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA,mDAAmD,eAAe;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA,IAAI,oDAAS;AACb;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA,0CAA0C,iDAAU;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qDAAU;AAChB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;ACnYvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,cAAc;AACrD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,qCAAqC,WAAW;AAChD,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,MAAM;AACxC,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,cAAc;AAClD;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;AC3KwB;AAC9C;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,2DAAc;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA,iBAAiB,iBAAiB;AAClC,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,gCAAgC,wBAAwB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA,mBAAmB,iBAAiB;AACpC,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,kCAAkC,oBAAoB;AACtD;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,6BAA6B;AAC7D,6DAA6D;AAC7D;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,SAAS,OAAO,0BAA0B,EAAE,SAAS,QAAQ,yBAAyB;AACrI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,mCAAmC;AACnC,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,SAAS,OAAO,0BAA0B,EAAE,SAAS,QAAQ,yBAAyB;AACnI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA,gCAAgC,SAAS;AACzC,gCAAgC,SAAS;AACzC,mCAAmC,MAAM;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,mBAAmB;AACjE;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,0BAA0B,MAAM;AAChC,qCAAqC,SAAS;AAC9C,mCAAmC,MAAM;AACzC,mCAAmC,WAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA,cAAc,4BAA4B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;ACzcpB;AAC0C;AAC1C;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,wDAAa;AACjB;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe,eAAe;AAC9B;AACA;AACA,sCAAsC,IAAI;AAC1C;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA,mCAAmC,UAAU;AAC7C;AACA;AACA,MAAM;AACN;AACA;AACA,oCAAoC,WAAW;AAC/C;AACA;AACA;AACA;AACA,IAAI,wDAAa;AACjB;AACA;AACA;AACA;AACA,aAAa,eAAe;AAC5B;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;AC9NxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe,eAAe;AAC9B;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK,EAAC;;;;;;;;;;;;AC9ErB;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;WACA;;;;;WCVA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNa;AACkB;AACM;AACE;AACA;AACA;AACE;AACJ;AACE;AACvC;AACkD;AACO;AACX;AACL;AACY;AACN;AACG;AACJ;AACN;AACM;AAC9C;AAC0C;AACR;AAClC;AACA;AACA;AACA;AACA;AACA,EAAE,4DAAI;AACN,EAAE,6DAAK;AACP,EAAE,6DAAK;AACP,EAAE,6DAAK;AACP;AACA,EAAE,4DAAI;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,6DAAK;AACP,EAAE,qEAAQ;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,iEAAa;AACf;AACA,EAAE,sEAAc;AAChB,EAAE,+DAAM;AACR,EAAE,kEAAS;AACX,EAAE,kEAAS;AACX,EAAE,kEAAS;AACX,EAAE,iEAAa;AACf,EAAE,iEAAa;AACf,EAAE,iEAAa;AACf,EAAE,gEAAU;AACZ;AACA;AACA;AACA;AACA,EAAE,gEAAU;AACZ;AACA;AACA;AACA;AACA,EAAE,6DAAO;AACT,EAAE,gEAAU;AACZ;AACA,EAAE,8DAAQ;AACV,EAAE,0DAAI;AACN,CAAC","sources":["webpack://foodsite/./js/modules/auth.js","webpack://foodsite/./js/modules/bodyNoScroll.js","webpack://foodsite/./js/modules/burger.js","webpack://foodsite/./js/modules/calc.js","webpack://foodsite/./js/modules/callMeBack.js","webpack://foodsite/./js/modules/cards.js","webpack://foodsite/./js/modules/collapsed.js","webpack://foodsite/./js/modules/fixedPromo.js","webpack://foodsite/./js/modules/forms.js","webpack://foodsite/./js/modules/location.js","webpack://foodsite/./js/modules/menuCardSlider.js","webpack://foodsite/./js/modules/modal.js","webpack://foodsite/./js/modules/moveContent.js","webpack://foodsite/./js/modules/replaceImg.js","webpack://foodsite/./js/modules/reviews.js","webpack://foodsite/./js/modules/slider.js","webpack://foodsite/./js/modules/tabs.js","webpack://foodsite/./js/modules/tabsAndSlider.js","webpack://foodsite/./js/modules/timer.js","webpack://foodsite/./Styles/styles.scss","webpack://foodsite/webpack/bootstrap","webpack://foodsite/webpack/runtime/define property getters","webpack://foodsite/webpack/runtime/harmony module decorator","webpack://foodsite/webpack/runtime/hasOwnProperty shorthand","webpack://foodsite/webpack/runtime/make namespace object","webpack://foodsite/./js/script.js"],"sourcesContent":["// Файл: js/modules/auth.js\r\n// Описание: Модуль для отображения модального окна с формами авторизации и регистрации.\r\n// Данные пользователя сохраняются в localStorage и отправляются на сервер по адресу http://localhost:3000/users.\r\n// При успешной авторизации (особенно для admin) обновляется текст кнопки авторизации и добавляется пункт \"Личный кабинет\" в навигацию.\r\n'use strict';\r\nimport toggleActive, { closeBurgerMenu } from './burger';\r\n\r\n/**\r\n * Основная функция модуля аутентификации и регистрации.\r\n * Экспортируется как функция по умолчанию.\r\n */\r\nexport default function auth() {\r\n  // Создаем контейнер модального окна для аутентификации/регистрации\r\n  const modal = document.createElement('div');\r\n  modal.classList.add('modal');\r\n\r\n  // Создаем диалог модального окна\r\n  const modalDialog = document.createElement('div');\r\n  modalDialog.classList.add('modal__dialog');\r\n\r\n  // Создаем контейнер содержимого модального окна\r\n  const modalContent = document.createElement('div');\r\n  modalContent.classList.add('modal__content');\r\n\r\n  // Кнопка закрытия модального окна\r\n  const modalClose = document.createElement('div');\r\n  modalClose.classList.add('modal__close');\r\n  modalClose.setAttribute('data-close', '');\r\n  modalClose.textContent = '×';\r\n  modalContent.appendChild(modalClose);\r\n\r\n  // Заголовок модального окна\r\n  const modalTitle = document.createElement('div');\r\n  modalTitle.classList.add('modal__title');\r\n  modalTitle.textContent = 'Аутентификация / Регистрация';\r\n  modalContent.appendChild(modalTitle);\r\n\r\n  // Создаем контейнер для переключения между формами\r\n  const tabContainer = document.createElement('div');\r\n  tabContainer.classList.add('modal__tabs');\r\n\r\n  // Кнопка для входа\r\n  const loginTab = document.createElement('button');\r\n  loginTab.textContent = 'Вход';\r\n  loginTab.classList.add('modal__tab', 'active');\r\n\r\n  // Кнопка для регистрации\r\n  const registerTab = document.createElement('button');\r\n  registerTab.textContent = 'Регистрация';\r\n  registerTab.classList.add('modal__tab');\r\n\r\n  tabContainer.appendChild(loginTab);\r\n  tabContainer.appendChild(registerTab);\r\n  modalContent.appendChild(tabContainer);\r\n\r\n  // Контейнеры для форм\r\n  const formsContainer = document.createElement('div');\r\n  formsContainer.classList.add('modal__forms');\r\n\r\n  // Форма входа\r\n  const loginForm = document.createElement('form');\r\n  loginForm.classList.add('modal__form');\r\n  loginForm.setAttribute('id', 'loginForm');\r\n  loginForm.innerHTML = `\r\n          <input type=\"text\" name=\"login\" placeholder=\"Логин\" class=\"modal__input\" required />\r\n          <input type=\"password\" name=\"password\" placeholder=\"Пароль\" class=\"modal__input\" required />\r\n          <button type=\"submit\" class=\"btn btn_dark btn_min\">Войти</button>\r\n        `;\r\n\r\n  // Форма регистрации\r\n  const registerForm = document.createElement('form');\r\n  registerForm.classList.add('modal__form');\r\n  registerForm.setAttribute('id', 'registerForm');\r\n  registerForm.style.display = 'none';\r\n  registerForm.innerHTML = `\r\n          <input type=\"text\" name=\"name\" placeholder=\"Имя\" class=\"modal__input\" required />\r\n          <input type=\"email\" name=\"email\" placeholder=\"Email\" class=\"modal__input\" required />\r\n          <input type=\"text\" name=\"login\" placeholder=\"Логин\" class=\"modal__input\" required />\r\n          <input type=\"password\" name=\"password\" placeholder=\"Пароль\" class=\"modal__input\" required />\r\n          <input type=\"tel\" name=\"phone\" placeholder=\"Телефон\" class=\"modal__input\" required />\r\n          <button type=\"submit\" class=\"btn btn_dark btn_min\">Зарегистрироваться</button>\r\n        `;\r\n\r\n  formsContainer.appendChild(loginForm);\r\n  formsContainer.appendChild(registerForm);\r\n  modalContent.appendChild(formsContainer);\r\n\r\n  // Собираем структуру модального окна\r\n  modalDialog.appendChild(modalContent);\r\n  modal.appendChild(modalDialog);\r\n  document.body.appendChild(modal);\r\n\r\n  /**\r\n   * Функция открытия модального окна.\r\n   */\r\n  function openModal() {\r\n    if (modal.classList.contains('show')) return;\r\n    modal.classList.add('show');\r\n  }\r\n\r\n  /**\r\n   * Функция закрытия модального окна.\r\n   */\r\n  function closeModal() {\r\n    modal.classList.remove('show');\r\n  }\r\n\r\n  modalClose.addEventListener('click', closeModal);\r\n  modal.addEventListener('click', (e) => {\r\n    if (e.target === modal) {\r\n      closeModal();\r\n    }\r\n  });\r\n\r\n  // Переключение между вкладками формы\r\n  loginTab.addEventListener('click', () => {\r\n    loginTab.classList.add('active');\r\n    registerTab.classList.remove('active');\r\n    loginForm.style.display = 'block';\r\n    registerForm.style.display = 'none';\r\n  });\r\n\r\n  registerTab.addEventListener('click', () => {\r\n    registerTab.classList.add('active');\r\n    loginTab.classList.remove('active');\r\n    registerForm.style.display = 'block';\r\n    loginForm.style.display = 'none';\r\n  });\r\n\r\n  /**\r\n   * Функция для отображения заказов пользователя.\r\n   * @param {Object} user - Объект пользователя, содержащий данные (например, login).\r\n   */\r\n  async function showUserOrders(user) {\r\n    try {\r\n      const response = await fetch('http://localhost:3000/order');\r\n      const orders = await response.json();\r\n      // Фильтруем заказы, где логин совпадает с логином пользователя\r\n      const userOrders = orders.filter((order) => order.login == user.login);\r\n      console.log(userOrders);\r\n      displayOrdersModal(userOrders, user);\r\n    } catch (error) {\r\n      console.error('Ошибка получения заказов:', error);\r\n      alert('Не удалось получить заказы пользователя.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Функция для создания и отображения модального окна с заказами пользователя.\r\n   * @param {Array} orders - Массив заказов пользователя.\r\n   * @param {Object} user - Объект пользователя.\r\n   */\r\n  function displayOrdersModal(orders, user) {\r\n    // Создаем модальное окно для отображения заказов\r\n    const ordersModal = document.createElement('div');\r\n    ordersModal.classList.add('modal');\r\n    ordersModal.style.zIndex = '1000'; // Поверх остальных\r\n    const ordersDialog = document.createElement('div');\r\n    ordersDialog.classList.add('modal__dialog');\r\n    const ordersContent = document.createElement('div');\r\n    ordersContent.classList.add('modal__content');\r\n\r\n    // Кнопка закрытия модального окна заказов\r\n    const ordersClose = document.createElement('div');\r\n    ordersClose.classList.add('modal__close');\r\n    ordersClose.setAttribute('data-close', '');\r\n    ordersClose.textContent = '×';\r\n    ordersContent.appendChild(ordersClose);\r\n\r\n    // Заголовок окна заказов\r\n    const ordersTitle = document.createElement('div');\r\n    ordersTitle.classList.add('modal__title');\r\n    ordersTitle.textContent = 'Ваши заказы';\r\n    ordersContent.appendChild(ordersTitle);\r\n\r\n    // Контейнер для списка заказов\r\n    const ordersList = document.createElement('div');\r\n    ordersList.classList.add('orders-list');\r\n\r\n    if (orders.length === 0) {\r\n      ordersList.textContent = 'Заказы не найдены.';\r\n    } else {\r\n      const ul = document.createElement('ul');\r\n      orders.forEach((order) => {\r\n        const li = document.createElement('li');\r\n        li.textContent = `Тариф: ${order['тариф']} | Дней: ${order['количество_дней']} | Итоговая цена: ${order['итоговая_стоимость']} руб.`;\r\n        ul.appendChild(li);\r\n      });\r\n      ordersList.appendChild(ul);\r\n    }\r\n    ordersContent.appendChild(ordersList);\r\n\r\n    ordersDialog.appendChild(ordersContent);\r\n    ordersModal.appendChild(ordersDialog);\r\n    document.body.appendChild(ordersModal);\r\n\r\n    /**\r\n     * Функция закрытия модального окна заказов.\r\n     */\r\n    function closeOrdersModal() {\r\n      ordersModal.remove();\r\n    }\r\n    ordersClose.addEventListener('click', closeOrdersModal);\r\n    ordersModal.addEventListener('click', (e) => {\r\n      if (e.target === ordersModal) {\r\n        closeOrdersModal();\r\n      }\r\n    });\r\n    // Показываем окно заказов\r\n    ordersModal.classList.add('show');\r\n  }\r\n\r\n  /**\r\n   * Функция для открытия админ панели.\r\n   * Выполняет параллельные запросы к API для получения данных.\r\n   */\r\n  async function openAdminPanel() {\r\n    try {\r\n      // Определяем перечисление API эндпоинтов для выборки данных\r\n      const endpoints = [\r\n        { key: 'menu', url: 'http://localhost:3000/menu' },\r\n        { key: 'requests', url: 'http://localhost:3000/requests' },\r\n        { key: 'reviews', url: 'http://localhost:3000/reviews' },\r\n        { key: 'callMeBack', url: 'http://localhost:3000/callMeBack' },\r\n        { key: 'order', url: 'http://localhost:3000/order' },\r\n        { key: 'users', url: 'http://localhost:3000/users' },\r\n      ];\r\n\r\n      // Параллельно выполняем запросы\r\n      const responses = await Promise.all(endpoints.map((ep) => fetch(ep.url)));\r\n      const dataList = await Promise.all(responses.map((res) => res.json()));\r\n\r\n      // Сопоставляем ключи с данными\r\n      const data = {};\r\n      endpoints.forEach((ep, index) => {\r\n        data[ep.key] = dataList[index];\r\n      });\r\n\r\n      // Отображаем админ панель с полученными данными\r\n      displayAdminPanel(data);\r\n    } catch (error) {\r\n      console.error('Ошибка получения данных для админ панели:', error);\r\n      alert('Не удалось получить данные для админ панели.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Функция для создания и отображения админ панели с полученными данными.\r\n   * @param {Object} data - Объект с данными, где ключи соответствуют типам данных.\r\n   */\r\n  function displayAdminPanel(data) {\r\n    // Создаем модальное окно для админ панели\r\n    const adminModal = document.createElement('div');\r\n    adminModal.classList.add('modal');\r\n    adminModal.style.zIndex = '1000';\r\n    const adminDialog = document.createElement('div');\r\n    adminDialog.classList.add('modal__dialog');\r\n    // Применяем стиль для админ панели: полная ширина и высота\r\n    adminDialog.style.width = '100%';\r\n    adminDialog.style.height = '100%';\r\n    const adminContent = document.createElement('div');\r\n    adminContent.classList.add('modal__content');\r\n    // Убираем ограничения стилей: max-height и margin-top\r\n    adminContent.style.maxHeight = 'none';\r\n    adminContent.style.marginTop = '0';\r\n\r\n    // Кнопка закрытия админ панели\r\n    const adminClose = document.createElement('div');\r\n    adminClose.classList.add('modal__close');\r\n    adminClose.setAttribute('data-close', '');\r\n    adminClose.textContent = '×';\r\n    adminContent.appendChild(adminClose);\r\n\r\n    // Заголовок админ панели\r\n    const adminTitle = document.createElement('div');\r\n    adminTitle.classList.add('modal__title');\r\n    adminTitle.textContent = 'АДМИН ПАНЕЛЬ - Все Записи';\r\n    adminContent.appendChild(adminTitle);\r\n\r\n    // Создаем секции для каждого набора данных\r\n    Object.keys(data).forEach((key) => {\r\n      const section = document.createElement('section');\r\n      const sectionTitle = document.createElement('h3');\r\n      sectionTitle.textContent = key.toUpperCase();\r\n      section.appendChild(sectionTitle);\r\n\r\n      const pre = document.createElement('pre');\r\n      pre.textContent = JSON.stringify(data[key], null, 2);\r\n      section.appendChild(pre);\r\n\r\n      adminContent.appendChild(section);\r\n    });\r\n\r\n    adminDialog.appendChild(adminContent);\r\n    adminModal.appendChild(adminDialog);\r\n    document.body.appendChild(adminModal);\r\n\r\n    /**\r\n     * Функция закрытия админ панели.\r\n     */\r\n    function closeAdminModal() {\r\n      adminModal.remove();\r\n    }\r\n\r\n    adminClose.addEventListener('click', closeAdminModal);\r\n    adminModal.addEventListener('click', (e) => {\r\n      if (e.target === adminModal) {\r\n        closeAdminModal();\r\n      }\r\n    });\r\n\r\n    adminModal.classList.add('show');\r\n  }\r\n\r\n  /**\r\n   * Функция для обновления пользовательского интерфейса после авторизации.\r\n   * @param {Object} user - Объект пользователя с данными авторизации.\r\n   */\r\n  function updateUIForAuth(user) {\r\n    const authBtn = document.querySelector('#authBtn');\r\n    if (authBtn) {\r\n      authBtn.textContent = 'Выйти';\r\n    }\r\n    // Если элемент personal-account еще не создан, создаем и вставляем его сразу после authBtn\r\n    if (authBtn && !document.querySelector('.personal-account')) {\r\n      const accountElement = document.createElement('div');\r\n      accountElement.classList.add('personal-account');\r\n      // Если роль пользователя admin, то текст - 'ADMIN PANEL', иначе - 'Личный кабинет'\r\n      accountElement.textContent =\r\n        user && user.role === 'admin' ? 'ADMIN PANEL' : 'Личный кабинет';\r\n\r\n      // Назначаем поведение клика:\r\n      // Для admin открываем админ панель, для обычного пользователя загружаем его заказы\r\n      if (user && user.role === 'admin') {\r\n        accountElement.addEventListener('click', openAdminPanel);\r\n      } else {\r\n        accountElement.addEventListener('click', () => {\r\n          showUserOrders(user);\r\n        });\r\n      }\r\n      authBtn.parentNode.insertBefore(accountElement, authBtn.nextSibling);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Функция для выхода пользователя (сброс состояния авторизации).\r\n   */\r\n  function logout() {\r\n    localStorage.removeItem('user');\r\n    const authBtn = document.querySelector('#authBtn');\r\n    if (authBtn) {\r\n      authBtn.textContent = 'Войти';\r\n    }\r\n    const headerNav = document.querySelector(\r\n      'body > header > div.header__bot-block > nav',\r\n    );\r\n    // Удаляем элемент personal-account, если он существует\r\n    const personalAccount = document.querySelector('.personal-account');\r\n    if (personalAccount) {\r\n      personalAccount.remove();\r\n    }\r\n  }\r\n\r\n  // Обработчик для формы входа\r\n  loginForm.addEventListener('submit', async (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData(loginForm);\r\n    const login = formData.get('login').trim();\r\n    const password = formData.get('password').trim();\r\n\r\n    try {\r\n      // Получаем список пользователей с сервера\r\n      const response = await fetch('http://localhost:3000/users');\r\n      const users = await response.json();\r\n\r\n      // Ищем пользователя с совпадающими данными\r\n      const user = users.find(\r\n        (u) => u.login === login && u.password === password,\r\n      );\r\n\r\n      if (user) {\r\n        // Сохраняем данные пользователя в localStorage\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n        updateUIForAuth(user);\r\n        closeModal();\r\n      } else {\r\n        alert('Неверные данные для входа');\r\n      }\r\n    } catch (error) {\r\n      console.error('Ошибка при авторизации:', error);\r\n    }\r\n  });\r\n\r\n  // Обработчик для формы регистрации\r\n  registerForm.addEventListener('submit', async (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData(registerForm);\r\n    const userData = {\r\n      name: formData.get('name').trim(),\r\n      email: formData.get('email').trim(),\r\n      login: formData.get('login').trim(),\r\n      password: formData.get('password').trim(),\r\n      phone: formData.get('phone').trim(),\r\n      role: 'user', // по умолчанию обычный пользователь\r\n    };\r\n\r\n    try {\r\n      // Отправляем данные на сервер (POST запрос)\r\n      const response = await fetch('http://localhost:3000/users', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const newUser = await response.json();\r\n        // Сохраняем нового пользователя в localStorage\r\n        localStorage.setItem('user', JSON.stringify(newUser));\r\n        updateUIForAuth(newUser);\r\n        closeModal();\r\n      } else {\r\n        alert('Ошибка регистрации. Попробуйте еще раз.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Ошибка при регистрации:', error);\r\n    }\r\n  });\r\n\r\n  // Назначаем обработчик для кнопки авторизации/выхода\r\n  const authBtn = document.querySelector('#authBtn');\r\n  if (authBtn) {\r\n    authBtn.addEventListener('click', () => {\r\n      const user = localStorage.getItem('user');\r\n      closeBurgerMenu();\r\n      if (user) {\r\n        // Если пользователь уже авторизован - выполнить выход\r\n        logout();\r\n      } else {\r\n        // Если не авторизован - открыть модальное окно аутентификации\r\n        openModal();\r\n      }\r\n    });\r\n  }\r\n\r\n  // Если пользователь уже был авторизован ранее, обновляем интерфейс\r\n  const storedUser = localStorage.getItem('user');\r\n  if (storedUser) {\r\n    updateUIForAuth(JSON.parse(storedUser));\r\n  }\r\n}\r\n","/*\r\n * Функция bodyNoScroll\r\n * Назначение: переключает класс 'no-scroll' для элемента <body>.\r\n * Это позволяет блокировать или разрешать прокрутку страницы.\r\n *\r\n * Параметры:\r\n *   item   - селектор контента, управляющего состоянием (по умолчанию '.burger__content').\r\n *   active - селектор активного состояния (по умолчанию '.active').\r\n */\r\nfunction bodyNoScroll(item = '.burger__content', active = '.active') {\r\n  const body = document.querySelector('body'); // Получаем элемент <body>\r\n\r\n  // Если указаны значения для item и active, переключаем класс 'no-scroll'\r\n  if (item && active) {\r\n    body.classList.toggle('no-scroll');\r\n    console.log('bodyNoScroll work'); // Выводим сообщение для отладки\r\n  }\r\n}\r\nexport default bodyNoScroll;\r\n","import bodyNoScroll from './bodyNoScroll.js';\r\nimport { modal, openModal, closeModal } from './modal.js';\r\n\r\n/**\r\n * Функция getHeaderHeightInPx возвращает высоту хедера в пикселях,\r\n * корректно обработав значение CSS-переменной --header-height, которая может быть задана в vh или px.\r\n *\r\n * @returns {number} Высота хедера в пикселях.\r\n */\r\nfunction getHeaderHeightInPx() {\r\n  let headerHeightValue = getComputedStyle(document.documentElement)\r\n    .getPropertyValue('--header-height')\r\n    .trim();\r\n\r\n  // Если значение задано в vh, конвертируем в пиксели\r\n  if (headerHeightValue.endsWith('vh')) {\r\n    const vhValue = parseFloat(headerHeightValue);\r\n    return (vhValue / 100) * window.innerHeight;\r\n  }\r\n\r\n  // Если значение задано в px, возвращаем числовое значение\r\n  if (headerHeightValue.endsWith('px')) {\r\n    return parseFloat(headerHeightValue);\r\n  }\r\n\r\n  // В остальных случаях возвращаем 0\r\n  return 0;\r\n}\r\n\r\n/**\r\n * Функция scrollWithOffset осуществляет плавную прокрутку к целевому элементу\r\n * с учётом отступа, равного высоте хедера (CSS-переменная --header-height).\r\n *\r\n * @param {string} targetSelector - Селектор целевого элемента (например, \"#section1\")\r\n */\r\nfunction scrollWithOffset(targetSelector) {\r\n  const targetElement = document.querySelector(targetSelector);\r\n  if (!targetElement) return;\r\n\r\n  const headerHeight = getHeaderHeightInPx();\r\n  const elementTop =\r\n    targetElement.getBoundingClientRect().top + window.pageYOffset;\r\n  const offsetPosition = elementTop - headerHeight;\r\n\r\n  window.scrollTo({\r\n    top: offsetPosition,\r\n    behavior: 'smooth',\r\n  });\r\n}\r\n\r\n/**\r\n * Функция closeBurgerMenu закрывает бургер-меню, удаляя класс \"active\"\r\n * у элемента, соответствующего селектору toggleItemSelector, и вызывая bodyNoScroll.\r\n *\r\n * @param {string} toggleItemSelector - Селектор элемента, у которого переключается класс \"active\" (по умолчанию \".burger__content\").\r\n */\r\nexport function closeBurgerMenu(toggleItemSelector = '.burger__content') {\r\n  const toggleItem = document.querySelector(toggleItemSelector);\r\n  if (toggleItem && toggleItem.classList.contains('active')) {\r\n    toggleItem.classList.remove('active');\r\n    bodyNoScroll();\r\n    console.log('Burger menu closed');\r\n  }\r\n}\r\n\r\n/**\r\n * Функция toggleActive отвечает за переключение активного состояния\r\n * для элементов бургер-меню.\r\n *\r\n * Параметры:\r\n *  @param {string} parent - Селектор родительского элемента (по умолчанию \".header__burger\").\r\n *  @param {string} item - Селектор дочерних элементов, для которых производится проверка (по умолчанию \".header__burger-line\").\r\n *  @param {string} toggleItemSelector - Селектор элемента, у которого переключается класс \"active\" (по умолчанию \".burger__content\").\r\n */\r\nfunction toggleActive(\r\n  parent = '.header__burger',\r\n  item = '.header__burger-line',\r\n  toggleItemSelector = '.burger__content',\r\n) {\r\n  // Получаем родительский элемент (бургер-иконку)\r\n  const parentElement = document.querySelector(parent);\r\n  if (!parentElement) {\r\n    console.error(`Не найден родительский элемент по селектору \"${parent}\"`);\r\n    return;\r\n  }\r\n\r\n  // Получаем все дочерние элементы (например, линии бургер-иконки)\r\n  const items = document.querySelectorAll(item);\r\n  if (!items.length) {\r\n    console.error(`Не найдены элементы по селектору \"${item}\"`);\r\n    return;\r\n  }\r\n\r\n  // Получаем элемент, у которого будет переключаться класс \"active\" (само меню)\r\n  const toggleItem = document.querySelector(toggleItemSelector);\r\n  if (!toggleItem) {\r\n    console.error(\r\n      `Не найден элемент для переключения по селектору \"${toggleItemSelector}\"`,\r\n    );\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Функция toggle:\r\n   * 1. Переключает блокировку прокрутки через bodyNoScroll.\r\n   * 2. Логгирует информацию в консоль.\r\n   * 3. Переключает класс \"active\" у toggleItem.\r\n   */\r\n  function toggle() {\r\n    bodyNoScroll();\r\n    console.log('burger clicked');\r\n    console.log(toggleItem);\r\n    toggleItem.classList.toggle('active');\r\n    console.log('Поменяли класс active у элемента');\r\n  }\r\n\r\n  // Привязываем обработчик клика к родительскому элементу (бургер-иконке)\r\n  parentElement.addEventListener('click', toggle);\r\n\r\n  // Обработчик для закрытия бургер-меню при клике на пункт меню\r\n  // Здесь предполагается, что пункты меню внутри toggleItem – это ссылки (<a>)\r\n  toggleItem.addEventListener('click', (event) => {\r\n    if (event.target.tagName === 'A') {\r\n      event.preventDefault();\r\n\r\n      // Извлекаем id целевого блока из атрибута href\r\n      const targetID = event.target.getAttribute('href');\r\n      if (targetID && targetID.startsWith('#')) {\r\n        scrollWithOffset(targetID);\r\n      }\r\n\r\n      // Закрываем бургер-меню через вызов функции closeBurgerMenu\r\n      closeBurgerMenu(toggleItemSelector);\r\n      console.log('Burger menu closed after clicking menu item');\r\n    }\r\n  });\r\n}\r\n\r\nexport default toggleActive;\r\n","// Импортируем модуль для обновления изображений при выборе параметров\r\nimport replaceImg from './replaceImg.js';\r\n\r\n/**\r\n * Функция calc инициализирует калькулятор показателей тела (BMI, тариф) по введённым данным.\r\n * Выполняет настройку значений по умолчанию, обработку кликов по статическим элементам и ввод динамических значений.\r\n */\r\nfunction calc() {\r\n  // Объявляем переменные для хранения выбранных параметров и введённых данных\r\n  let sex, height, weight, age, ratio;\r\n\r\n  // Элементы для вывода результата и информации об индексе\r\n  const result = document.querySelector('.calculating__result span');\r\n  const index = document.querySelector('.calculating__result.bmi span');\r\n  const indexInfo = document.querySelector('.calculating__total.bmi.info span');\r\n  const tariffInfo = document.querySelector(\r\n    '.calculating__total.bmi.tariff span',\r\n  );\r\n  const tariffImg = document.querySelector('.tariff--img'); // не используется, но оставлено для возможного использования\r\n\r\n  // Инициализация значений по умолчанию для пола и коэффициента активности из localStorage\r\n  if (localStorage.getItem('sex')) {\r\n    sex = localStorage.getItem('sex');\r\n  } else {\r\n    sex = 'female';\r\n    localStorage.setItem('sex', 'female');\r\n  }\r\n\r\n  if (localStorage.getItem('ratio')) {\r\n    ratio = parseFloat(localStorage.getItem('ratio'));\r\n  } else {\r\n    ratio = 1.375;\r\n    localStorage.setItem('ratio', '1.375');\r\n  }\r\n\r\n  /**\r\n   * Функция initLocalSettings устанавливает активный класс для элементов выбора (пол, коэффициент),\r\n   * основываясь на значениях, сохраненных в localStorage.\r\n   * @param {string} selector - CSS-селектор для выбора элементов.\r\n   * @param {string} activeClass - CSS-класс для активного состояния.\r\n   */\r\n  function initLocalSettings(selector, activeClass) {\r\n    const elements = document.querySelectorAll(selector);\r\n    elements.forEach((elem) => {\r\n      elem.classList.remove(activeClass);\r\n      if (elem.getAttribute('id') === localStorage.getItem('sex')) {\r\n        elem.classList.add(activeClass);\r\n      }\r\n      if (elem.getAttribute('data-ratio') === localStorage.getItem('ratio')) {\r\n        elem.classList.add(activeClass);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Инициализируем активные состояния для выбора пола и коэффициента активности\r\n  initLocalSettings('#gender div', 'calculating__choose-item_active');\r\n  initLocalSettings(\r\n    '.calculating__choose_big div',\r\n    'calculating__choose-item_active',\r\n  );\r\n\r\n  /**\r\n   * Функция calcTotal рассчитывает общий результат (калории или другой показатель)\r\n   * в зависимости от выбранного пола, уровня активности и введённых данных.\r\n   */\r\n  function calcTotal() {\r\n    // Если не все данные введены, выводим заглушку\r\n    if (!sex || !height || !weight || !age || !ratio) {\r\n      result.textContent = '____';\r\n      return;\r\n    }\r\n\r\n    // Вычисляем результат по разным формулам для женского и мужского пола\r\n    if (sex === 'female') {\r\n      result.textContent = Math.round(\r\n        (447.6 + 9.2 * weight + 3.1 * height - 4.3 * age) * ratio,\r\n      );\r\n    } else {\r\n      result.textContent = Math.round(\r\n        (88.36 + 13.4 * weight + 4.8 * height - 5.7 * age) * ratio,\r\n      );\r\n    }\r\n\r\n    // Если результат не является числом, очищаем вывод\r\n    if (\r\n      isNaN(result.textContent) ||\r\n      !/^-?\\d+(\\.\\d+)?$/.test(result.textContent)\r\n    ) {\r\n      result.textContent = '____';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Функция calcIndex вычисляет индекс массы тела (BMI) и отображает информацию об интерпретации результата.\r\n   */\r\n  function calcIndex() {\r\n    // Элементы контейнеров для вывода дополнительной информации\r\n    const indexValueContainer = document.querySelector(\r\n      '.calculating__total.bmi.info',\r\n    );\r\n    const tariffInfoContainer = document.querySelector(\r\n      '.calculating__total.bmi.tariff',\r\n    );\r\n\r\n    // Объект с URL-ами изображений для разных диапазонов BMI\r\n    const imageUrls = {\r\n      underweight: '../img/food/slider_food1.png',\r\n      normal: '../img/food/slider__food2.png',\r\n      overweight: '../img/food/slider__food3.png',\r\n      obesity: '../img/food/slider__food4.png',\r\n    };\r\n\r\n    // Если рост или вес не заданы, скрываем информацию и выводим заглушку\r\n    if (!height || !weight) {\r\n      index.textContent = '____';\r\n      indexValueContainer.style.display = 'none';\r\n      tariffInfoContainer.style.display = 'none';\r\n      return;\r\n    } else {\r\n      // Отображаем блоки с информацией\r\n      indexValueContainer.style.display = 'flex';\r\n      tariffInfoContainer.style.display = 'flex';\r\n\r\n      // Расчет BMI с округлением до одного знака после запятой\r\n      const indexValue = +((10000 * weight) / (height * height)).toFixed(1);\r\n      index.textContent = indexValue;\r\n\r\n      // Определяем текстовое описание и тариф в зависимости от значения BMI\r\n      if (indexValue <= 16) {\r\n        indexInfo.textContent = 'Выраженный дефицит массы тела';\r\n        tariffInfo.textContent = 'Набор веса';\r\n        tariffInfoContainer.style.backgroundImage = `url(${imageUrls.underweight})`;\r\n      } else if (indexValue > 16 && indexValue <= 18.4) {\r\n        indexInfo.textContent = 'Недостаточная (дефицит) масса тела';\r\n        tariffInfo.textContent = 'Набор веса';\r\n        tariffInfoContainer.style.backgroundImage = `url(${imageUrls.underweight})`;\r\n      } else if (indexValue >= 18.5 && indexValue <= 24.9) {\r\n        indexInfo.textContent = 'Норма';\r\n        tariffInfo.textContent = 'Баланс';\r\n        tariffInfoContainer.style.backgroundImage = `url(${imageUrls.normal})`;\r\n      } else if (indexValue >= 25 && indexValue <= 29.9) {\r\n        indexInfo.textContent = 'Избыточная масса тела';\r\n        tariffInfo.textContent = 'Похудение';\r\n        tariffInfoContainer.style.backgroundImage = `url(${imageUrls.overweight})`;\r\n      } else if (indexValue >= 30 && indexValue <= 34.9) {\r\n        indexInfo.textContent = 'Ожирение первой степени';\r\n        tariffInfo.textContent = 'Похудение';\r\n        tariffInfoContainer.style.backgroundImage = `url(${imageUrls.overweight})`;\r\n      } else if (indexValue >= 35 && indexValue <= 39.9) {\r\n        indexInfo.textContent = 'Ожирение второй степени';\r\n        tariffInfo.textContent = 'Похудение';\r\n        tariffInfoContainer.style.backgroundImage = `url(${imageUrls.obesity})`;\r\n      } else if (indexValue >= 40) {\r\n        indexInfo.textContent = 'Ожирение третьей степени (морбидное)';\r\n        tariffInfo.textContent = 'Похудение';\r\n        tariffInfoContainer.style.backgroundImage = `url(${imageUrls.obesity})`;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Вызываем функции расчёта после инициализации\r\n  calcTotal();\r\n  calcIndex();\r\n\r\n  /**\r\n   * Функция getStaticInformation обрабатывает клики по статическим элементам выбора (пол, коэффициент).\r\n   * При клике обновляются соответствующие переменные, сохраняются в localStorage и пересчитываются показатели.\r\n   * @param {string} parentSelector - CSS-селектор родительского контейнера.\r\n   * @param {string} activeClass - CSS-класс для активного состояния.\r\n   */\r\n  function getStaticInformation(parentSelector, activeClass) {\r\n    const elements = document.querySelectorAll(`${parentSelector} div`);\r\n    const parent = document.querySelector(parentSelector);\r\n\r\n    parent.addEventListener('click', (event) => {\r\n      const elementWithRatio = event.target.closest('[data-ratio]');\r\n      if (elementWithRatio) {\r\n        // Обработка выбора коэффициента активности\r\n        const ratioValue = elementWithRatio.getAttribute('data-ratio');\r\n        ratio = parseFloat(ratioValue);\r\n        if (!isNaN(ratio)) {\r\n          localStorage.setItem('ratio', ratioValue);\r\n        }\r\n      } else if (event.target.id === 'female' || event.target.id === 'male') {\r\n        // Обработка выбора пола\r\n        sex = event.target.getAttribute('id');\r\n        localStorage.setItem('sex', sex);\r\n      }\r\n      // Удаляем активный класс у всех элементов\r\n      elements.forEach((elem) => {\r\n        elem.classList.remove(activeClass);\r\n      });\r\n      // Если клик был по нужному элементу, добавляем активный класс и обновляем изображения\r\n      if (\r\n        event.target.matches(\r\n          '.calculating__choose-item, .calculating__choose-item *',\r\n        )\r\n      ) {\r\n        const targetElement =\r\n          event.target.closest('.calculating__choose-item') || event.target;\r\n        targetElement.classList.add(activeClass);\r\n        replaceImg(parentSelector, 'calculating__choose-item', activeClass);\r\n      }\r\n      // Пересчитываем показатели после обновления выбора\r\n      calcTotal();\r\n      calcIndex();\r\n    });\r\n  }\r\n\r\n  // Привязываем обработчики кликов для элементов выбора пола и коэффициента\r\n  getStaticInformation('#gender', 'calculating__choose-item_active');\r\n  getStaticInformation(\r\n    '.calculating__choose_big',\r\n    'calculating__choose-item_active',\r\n  );\r\n\r\n  /**\r\n   * Функция getDynamicInformation обрабатывает ввод динамических данных (рост, вес, возраст),\r\n   * добавляет подсветку при ошибке ввода и пересчитывает показатели.\r\n   * @param {string} selector - CSS-селектор поля ввода.\r\n   */\r\n  function getDynamicInformation(selector) {\r\n    const input = document.querySelector(selector);\r\n    input.addEventListener('input', () => {\r\n      // Если введены нечисловые символы, добавляем класс invalid для визуальной подсветки ошибки\r\n      if (input.value.match(/\\D/g)) {\r\n        input.classList.add('invalid');\r\n      } else {\r\n        input.classList.remove('invalid');\r\n      }\r\n      // Назначаем введенное значение соответствующей переменной\r\n      switch (input.getAttribute('id')) {\r\n        case 'height':\r\n          height = +input.value;\r\n          break;\r\n        case 'weight':\r\n          weight = +input.value;\r\n          break;\r\n        case 'age':\r\n          age = +input.value;\r\n          break;\r\n      }\r\n      // Пересчитываем показатели при каждом изменении значения\r\n      calcTotal();\r\n      calcIndex();\r\n    });\r\n  }\r\n\r\n  // Привязываем обработчики ввода для полей: рост, вес, возраст\r\n  getDynamicInformation('#height');\r\n  getDynamicInformation('#weight');\r\n  getDynamicInformation('#age');\r\n}\r\n\r\n// Запускаем калькулятор после загрузки DOM\r\ndocument.addEventListener('DOMContentLoaded', calc);\r\n\r\n// Экспорт функции calc можно добавить, если требуется её использование в других модулях\r\nexport default calc;\r\n","/**\r\n * Функция для инициализации обработки формы обратного звонка.\r\n * Находит необходимые элементы, устанавливает обработчики событий\r\n * и выполняет валидацию, сбор данных, получение геолокации и отправку данных на сервер.\r\n */\r\nfunction callMeBack() {\r\n  // Получение элементов формы\r\n  const nameInput = document.querySelector('.order__input.order__input--name');\r\n  const numberInput = document.querySelector(\r\n    '.order__input.order__input--number',\r\n  );\r\n  const callBtn = document.querySelector('.order__btn');\r\n\r\n  // Регулярное выражение для валидации телефонного номера\r\n  const phoneRegex = /^\\+?\\d{1,3}?[-.\\s]?\\(?\\d{3}\\)?[-.\\s]?\\d{3}[-.\\s]?\\d{4}$/;\r\n\r\n  /**\r\n   * Валидация заполнения формы.\r\n   * @returns {boolean} isValid - true, если поля заполнены корректно.\r\n   */\r\n  function validateForm() {\r\n    let isValid = true;\r\n\r\n    // Очистка предыдущих сообщений об ошибке\r\n    nameInput.classList.remove('invalid');\r\n    numberInput.classList.remove('invalid');\r\n\r\n    // Проверка на пустое значение поля имени\r\n    if (!nameInput.value.trim()) {\r\n      nameInput.classList.add('invalid');\r\n      isValid = false;\r\n    }\r\n\r\n    // Проверка телефонного номера по регулярному выражению\r\n    if (!phoneRegex.test(numberInput.value.trim())) {\r\n      numberInput.classList.add('invalid');\r\n      isValid = false;\r\n    }\r\n\r\n    return isValid;\r\n  }\r\n\r\n  /**\r\n   * Получение текущего времени в формате ISO.\r\n   * @returns {string} Текущее время в формате ISO.\r\n   */\r\n  function getCurrentTime() {\r\n    const now = new Date();\r\n    return now.toISOString();\r\n  }\r\n\r\n  /**\r\n   * Получение координат пользователя через Geolocation API.\r\n   * @returns {Promise<Object>} Промис, который разрешается с объектом { latitude, longitude }.\r\n   */\r\n  function getUserLocation() {\r\n    return new Promise((resolve, reject) => {\r\n      if (!navigator.geolocation) {\r\n        reject(new Error('Geolocation is not supported by this browser'));\r\n      } else {\r\n        navigator.geolocation.getCurrentPosition(\r\n          (position) => {\r\n            resolve({\r\n              latitude: position.coords.latitude,\r\n              longitude: position.coords.longitude,\r\n            });\r\n          },\r\n          (error) => {\r\n            reject(new Error(`Geolocation error: ${error.message}`));\r\n          },\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Преобразование координат (latitude, longitude) в город и страну с использованием OpenCage API.\r\n   * @param {Object} coords - Объект с широтой и долготой.\r\n   * @returns {Promise<Object>} Промис, который разрешается с объектом { city, country }.\r\n   */\r\n  async function getCityAndCountry({ latitude, longitude }) {\r\n    const apiKey = 'e6956a4aa92240e2ad6c176774e3c2d7'; // API ключ для OpenCage\r\n    const url = `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${apiKey}`;\r\n\r\n    try {\r\n      const response = await fetch(url);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch location data');\r\n      }\r\n      const data = await response.json();\r\n      // Извлекаем город и страну из первого результата или устанавливаем null\r\n      const { city, country } = data.results[0]?.components || {\r\n        city: null,\r\n        country: null,\r\n      };\r\n      return { city, country };\r\n    } catch (error) {\r\n      console.warn('Error fetching city and country:', error.message);\r\n      return { city: null, country: null };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Отображение индикатора загрузки.\r\n   * @returns {HTMLElement} Элемент индикатора загрузки.\r\n   */\r\n  function showLoadingSpinner() {\r\n    const spinner = document.createElement('div');\r\n    spinner.className = 'spinner';\r\n    document.body.appendChild(spinner);\r\n    return spinner;\r\n  }\r\n\r\n  /**\r\n   * Удаление индикатора загрузки после отправки данных.\r\n   * @param {HTMLElement} statusMessage - Элемент индикатора загрузки.\r\n   */\r\n  function cleanupAfterSubmission(statusMessage) {\r\n    if (statusMessage && statusMessage.parentNode) {\r\n      statusMessage.parentNode.removeChild(statusMessage);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Отображение сообщения пользователю после отправки формы.\r\n   * @param {string} message - Сообщение для отображения.\r\n   */\r\n  function showThanksModal(message) {\r\n    // В дальнейшем можно заменить стандартный alert на кастомное модальное окно.\r\n    alert(message);\r\n  }\r\n\r\n  /**\r\n   * Основная обработка отправки формы.\r\n   * Здесь происходит валидация, сбор данных формы, получение времени,\r\n   * геолокации, преобразование координат в адрес и отправка данных на сервер.\r\n   * @param {Event} e - Событие отправки.\r\n   */\r\n  async function handleFormSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    // Валидация формы; если не прошла, прекращаем выполнение функции\r\n    if (!validateForm()) return;\r\n\r\n    // Отображаем индикатор загрузки\r\n    const statusMessage = showLoadingSpinner();\r\n\r\n    try {\r\n      // Получение текущего времени\r\n      const currentTime = getCurrentTime();\r\n\r\n      // Получение геолокации пользователя с обработкой возможного отказа\r\n      let location = null;\r\n      try {\r\n        location = await getUserLocation();\r\n      } catch (locationError) {\r\n        console.warn(locationError.message);\r\n        location = { latitude: null, longitude: null };\r\n      }\r\n\r\n      // Получение города и страны на основе координат\r\n      const { city, country } = await getCityAndCountry(location);\r\n\r\n      // Формирование данных для отправки на сервер\r\n      const formData = {\r\n        name: nameInput.value.trim(),\r\n        phone: numberInput.value.trim(),\r\n        time: currentTime,\r\n        location: {\r\n          latitude: location.latitude,\r\n          longitude: location.longitude,\r\n          city: city,\r\n          country: country,\r\n        },\r\n      };\r\n\r\n      // Отправка данных на сервер методом POST\r\n      const response = await fetch('http://localhost:3000/callMeBack', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n\r\n      // Проверка статуса ответа от сервера\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      // Чтение ответа сервера\r\n      const text = await response.text();\r\n      console.log('Server response:', text);\r\n\r\n      // Парсинг ответа в JSON-формат\r\n      const data = JSON.parse(text);\r\n\r\n      // Валидация структуры ответа от сервера\r\n      if (!data || typeof data.success !== 'boolean') {\r\n        throw new Error('Invalid server response format');\r\n      }\r\n\r\n      if (!data.success) {\r\n        throw new Error('Failed to send request');\r\n      }\r\n\r\n      // Если все прошло успешно, выводим сообщение для пользователя\r\n      showThanksModal('Спасибо! Мы скоро свяжемся с вами.');\r\n    } catch (error) {\r\n      // Обработка ошибок при отправке данных\r\n      console.error('Form submission error:', error.message);\r\n      showThanksModal('Что-то пошло не так...');\r\n    } finally {\r\n      // Удаление индикатора загрузки в любом случае\r\n      cleanupAfterSubmission(statusMessage);\r\n    }\r\n  }\r\n\r\n  // Привязываем событие клика к обработчику отправки формы\r\n  callBtn.addEventListener('click', handleFormSubmit);\r\n}\r\n\r\n// Инициализация модуля после загрузки DOM\r\ndocument.addEventListener('DOMContentLoaded', callMeBack);\r\n\r\nexport default callMeBack;\r\n","/*\r\n  Данный модуль отвечает за создание карточек меню и реализацию функционала переключения табов.\r\n  Используется для получения данных с сервера, создания карточек (MenuCard) и обработки событий\r\n  переключения табов по нажатию на соответствующие кнопки.\r\n*/\r\n\r\nfunction cards() {\r\n  // Класс MenuCard предназначен для создания карточек меню\r\n  class MenuCard {\r\n    /**\r\n     * Конструктор класса MenuCard.\r\n     * @param {string} imgSrc - Путь к изображению.\r\n     * @param {string} alt - Альтернативный текст изображения.\r\n     * @param {string} title - Заголовок карточки.\r\n     * @param {string} description - Описание карточки.\r\n     * @param {number} price - Цена в исходной валюте.\r\n     * @param {string} parentSelector - Селектор родительского элемента для вставки карточки.\r\n     * @param {number|string} tab - Идентификатор таба для переключения.\r\n     * @param  {...string} classes - Дополнительные классы для карточки.\r\n     */\r\n    constructor(\r\n      imgSrc,\r\n      alt,\r\n      title,\r\n      description,\r\n      price,\r\n      parentSelector,\r\n      tab,\r\n      ...classes\r\n    ) {\r\n      // Получаем родительский элемент по селектору\r\n      this.parent = document.querySelector(parentSelector);\r\n      this.imgSrc = imgSrc;\r\n      this.alt = alt;\r\n      this.title = title;\r\n      this.description = description;\r\n      this.price = price;\r\n      this.transfer = 50; // Коэффициент для конвертации цены\r\n      this.changeTo(); // Конвертируем цену\r\n      this.classes = classes;\r\n      this.tab = tab;\r\n    }\r\n\r\n    // Метод для преобразования цены\r\n    changeTo() {\r\n      this.price = this.price * this.transfer;\r\n    }\r\n\r\n    /**\r\n     * Метод для отрисовки карточки в DOM.\r\n     * Создает элемент, добавляет необходимые классы и наполняет его HTML содержимым.\r\n     */\r\n    render() {\r\n      const element = document.createElement('div');\r\n\r\n      // Если дополнительные классы не указаны, присваиваем класс по умолчанию\r\n      if (this.classes.length === 0) {\r\n        // Можно использовать локальную переменную вместо this.element, так как она не используется вне метода\r\n        element.classList.add('menu__item');\r\n      } else {\r\n        // Если классы переданы, добавляем их ко всем элементу\r\n        this.classes.forEach((className) => element.classList.add(className));\r\n      }\r\n\r\n      // Формируем внутреннее содержимое карточки\r\n      element.innerHTML = `\r\n        <img src=\"${this.imgSrc}\" alt=\"${this.alt}\" />\r\n        <h3 class=\"menu__item-subtitle\">${this.title}</h3>\r\n        <div class=\"menu__item-descr\">${this.description}</div>\r\n        <div class=\"menu__item-divider\"></div>\r\n        <div class=\"menu__item-price\">\r\n          <div class=\"menu__item-cost\">Цена:</div>\r\n          <div class=\"menu__item-total\"><span>${this.price}</span> руб/день</div>\r\n        </div>\r\n        <a href=\"#preview\">\r\n          <div class=\"menu__item-select\" data-tab=\"tab-${this.tab}\">Перейти</div>\r\n        </a>\r\n      `;\r\n\r\n      // Добавляем карточку в указанный родительский элемент\r\n      this.parent.append(element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Асинхронная функция для получения ресурсов с сервера.\r\n   * @param {string} url - Ссылка для запроса.\r\n   * @returns {Promise<any>} - Возвращаем JSON данные.\r\n   */\r\n  const getResource = async (url) => {\r\n    const res = await fetch(url);\r\n    if (!res.ok) {\r\n      // Генерируем ошибку если запрос завершился неудачно\r\n      throw new Error(\r\n        `Не удалось получить данные с ${url}, статус: ${res.status}`,\r\n      );\r\n    }\r\n    return await res.json();\r\n  };\r\n\r\n  // Получаем данные меню с сервера и создаем карточки\r\n  getResource('http://localhost:3000/menu')\r\n    .then((data) => {\r\n      console.log(data);\r\n\r\n      // Для каждого элемента данных создаем карточку и отрисовываем её\r\n      data.forEach(({ img, altimg, title, descr, price, tab }) => {\r\n        new MenuCard(\r\n          img,\r\n          altimg,\r\n          title,\r\n          descr,\r\n          price,\r\n          '.menu .container',\r\n          tab,\r\n        ).render();\r\n      });\r\n\r\n      // Функция для организации переключения табов\r\n      function menuTabSwitch() {\r\n        // Получаем все кнопки для переключения и родительский контейнер табов\r\n        const selectBtn = document.querySelectorAll('.menu__item-select');\r\n        const tabsParent = document.querySelector('.tabheader__items');\r\n\r\n        /**\r\n         * Обработчик переключения табов.\r\n         * Генерирует событие 'tabswitch' с данными выбранного таба.\r\n         * @param {HTMLElement} btn - Элемент кнопки, по которому кликнули.\r\n         */\r\n        function handleTabSwitch(btn) {\r\n          const dataTab = btn.dataset.tab;\r\n          console.log(dataTab);\r\n          // Генерация кастомного события для переключения табов\r\n          tabsParent.dispatchEvent(\r\n            new CustomEvent('tabswitch', { detail: { dataTab } }),\r\n          );\r\n        }\r\n\r\n        // Назначаем обработчик для каждой кнопки выбора\r\n        selectBtn.forEach((btn) => {\r\n          btn.addEventListener('click', () => {\r\n            handleTabSwitch(btn);\r\n          });\r\n        });\r\n      }\r\n\r\n      // Вызываем функцию для настройки переключения табов\r\n      menuTabSwitch();\r\n\r\n      // Вызываем функцию переключения табов.\r\n      // Замечание: функция tabs должна быть определена в другом модуле и импортирована в проект.\r\n      tabs(\r\n        '.tabheader__item',\r\n        '.tabcontent',\r\n        '.tabheader__items',\r\n        '.tabcontent__bot-cards',\r\n        '.tabdays__choise-btn',\r\n      );\r\n    })\r\n    .catch((error) => {\r\n      console.error('Ошибка получения данных меню:', error);\r\n    });\r\n}\r\n\r\nexport default cards;\r\n","/**\r\n * Enable collapse/expand functionality for multiple menu fields.\r\n *\r\n * This function selects multiple elements matching the given selectors\r\n * for menu fields and their corresponding toggle buttons. It sets the initial\r\n * state (collapsed) for each menu field and attaches an event listener to\r\n * toggle the collapse class and update the button text.\r\n *\r\n * @param {string} sectionSelector  - CSS selector for menu field elements (default: '.menu__field')\r\n * @param {string} toggleSelector   - CSS selector for toggle button elements (default: '.menu .expand')\r\n * @param {number} rename           - Flag to indicate if button text should be updated (default: 1)\r\n */\r\nfunction collapsed(\r\n  sectionSelector = '.menu__field',\r\n  toggleSelector = '.menu .expand',\r\n  rename = 1,\r\n) {\r\n  // Получаем коллекцию DOM-элементов для полей меню\r\n  const menuFields = document.querySelectorAll(sectionSelector);\r\n  // Получаем коллекцию DOM-элементов для кнопок переключения\r\n  const toggleButtons = document.querySelectorAll(toggleSelector);\r\n\r\n  // Проверка наличия необходимых элементов\r\n  if (menuFields.length === 0) {\r\n    console.error(`Элементы с селектором \"${sectionSelector}\" не найдены.`);\r\n    return;\r\n  }\r\n  if (toggleButtons.length === 0) {\r\n    console.error(`Элементы с селектором \"${toggleSelector}\" не найдены.`);\r\n    return;\r\n  }\r\n  if (menuFields.length !== toggleButtons.length) {\r\n    console.warn(\r\n      `Несоответствие: количество полей меню (${menuFields.length}) не совпадает с количеством кнопок (${toggleButtons.length}). Будет обработано минимальное количество совпадающих элементов.`,\r\n    );\r\n  }\r\n\r\n  // Определяем количество пар для обработки\r\n  const count = Math.min(menuFields.length, toggleButtons.length);\r\n\r\n  // Устанавливаем первоначальное состояние для каждой пары элементов\r\n  for (let i = 0; i < count; i++) {\r\n    const menuField = menuFields[i];\r\n    const toggleButton = toggleButtons[i];\r\n\r\n    // Устанавливаем первоначальное состояние: меню свернуто\r\n    menuField.classList.add('collapsed');\r\n    // Устанавливаем текст кнопки, если требуется переименование\r\n    if (rename) {\r\n      toggleButton.textContent = 'Развернуть';\r\n    }\r\n\r\n    // Добавляем обработчик события клика на кнопку\r\n    toggleButton.addEventListener('click', () => {\r\n      // Переключаем класс 'collapsed' для изменения состояния меню\r\n      menuField.classList.toggle('collapsed');\r\n      // Изменяем текст кнопки в зависимости от текущего состояния меню\r\n      if (rename) {\r\n        toggleButton.textContent = menuField.classList.contains('collapsed')\r\n          ? 'Развернуть'\r\n          : 'Свернуть';\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n// Экспортируем функцию для использования в других модулях, если требуется\r\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\r\n  module.exports = collapsed;\r\n} else {\r\n  window.collapsed = collapsed;\r\n}\r\n\r\n// Пример инициализации, если модуль загружается напрямую\r\n// Для использования, раскомментируйте следующую строку:\r\n// collapsed();\r\n\r\n// Экспортируем функцию для использования в других частях приложения\r\nexport default collapsed;\r\n","/**\r\n * Функция для настройки поведения фиксированной промо-блокировки,\r\n * которая меняет классы элемента в зависимости от положения прокрутки.\r\n */\r\nexport default function fixedPromo() {\r\n  /**\r\n   * Обработчик события прокрутки страницы.\r\n   * Проверяет позицию прокрутки и обновляет классы рекламного блока.\r\n   */\r\n  function handleScroll() {\r\n    // Получаем рекламный блок и родительский контейнер\r\n    const promoElement = document.querySelector('.tabcontainer__bot-promo');\r\n    const parent = document.querySelector('.tabcontainer');\r\n\r\n    // Проверяем наличие обязательных элементов\r\n    if (!promoElement) {\r\n      console.error('Элемент с классом .tabcontainer__bot-promo не найден');\r\n      return; // Прерываем выполнение, если рекламный блок не найден\r\n    }\r\n    if (!parent) {\r\n      console.error('Элемент с классом .tabcontainer не найден');\r\n      return; // Прерываем выполнение, если родительский контейнер не найден\r\n    }\r\n\r\n    // Вычисляем вертикальную позицию родительского контейнера относительно начала документа\r\n    const promoElementPosition =\r\n      parent.getBoundingClientRect().top + window.scrollY;\r\n    // Текущая позиция прокрутки страницы\r\n    const scrollPosition = window.scrollY;\r\n\r\n    // Если страница прокручена ниже или равна началу рекламного блока:\r\n    // Убираем класс фиксированного нижнего позиционирования,\r\n    // иначе добавляем его для возврата к абсолютному позиционированию.\r\n    if (scrollPosition >= promoElementPosition) {\r\n      promoElement.classList.remove('tabcontainer__bot-promo--fixedBot');\r\n    } else {\r\n      promoElement.classList.add('tabcontainer__bot-promo--fixedBot');\r\n    }\r\n\r\n    // Если прокрутка значительно превышает начальную позицию рекламного блока\r\n    // (расчетный порог: высота элемента, умноженная на 15),\r\n    // переключаем фиксированное верхнее позиционирование.\r\n    if (\r\n      scrollPosition >\r\n      promoElementPosition + promoElement.offsetHeight * 15\r\n    ) {\r\n      promoElement.classList.remove('tabcontainer__bot-promo--fixedBot');\r\n      promoElement.classList.add('tabcontainer__bot-promo--fixedTop');\r\n    } else {\r\n      promoElement.classList.remove('tabcontainer__bot-promo--fixedTop');\r\n    }\r\n  }\r\n\r\n  // Добавляем обработчик события скролла к документу.\r\n  document.addEventListener('scroll', handleScroll);\r\n}\r\n","import { openModal, closeModal } from './modal.js';\r\n\r\nfunction forms() {\r\n  //FORM\r\n  const forms = document.querySelectorAll('.modalForm');\r\n  const message = {\r\n    loading: 'img/form/spinner.svg',\r\n    success: 'Спасибо! Скоро мы с вами свяжемся',\r\n    failure: 'Что-то пошло не так...',\r\n  };\r\n\r\n  forms.forEach((item) => {\r\n    bindPostData(item);\r\n  });\r\n\r\n  const postData = async (url, data) => {\r\n    const res = await fetch(url, {\r\n      method: 'POST',\r\n      headers: { 'Content-type': 'application/json; charset=utf-8' },\r\n      body: data,\r\n    });\r\n    return await res.json();\r\n  };\r\n\r\n  function bindPostData(form) {\r\n    form.addEventListener('submit', (event) => {\r\n      event.preventDefault();\r\n\r\n      const statusMessage = document.createElement('img');\r\n      statusMessage.src = message.loading;\r\n      statusMessage.style.cssText = `display: block; margin: 0 auto;`; //TODO: вынести в отдельый класс css\r\n      form.insertAdjacentElement('afterend', statusMessage);\r\n\r\n      const formData = new FormData(form);\r\n\r\n      // const object = {};\r\n      // formData.forEach(function (value, key) {\r\n      //   object[key] = value;\r\n      // });\r\n\r\n      // fetch('index.php', {\r\n      //   method: 'POST',\r\n      //   headers: { 'Content-type': 'application/json; charset=utf-8' },\r\n      //   body: JSON.stringify(object),\r\n      // });\r\n      const json = JSON.stringify(Object.fromEntries(formData.entries()));\r\n\r\n      postData('http://localhost:3000/requests', json)\r\n        // .then((data) => data.text())\r\n        .then((data) => {\r\n          console.log(data);\r\n          showThanksModal(message.success);\r\n          statusMessage.remove();\r\n        })\r\n        .catch(() => {\r\n          showThanksModal(message.failure);\r\n        })\r\n        .finnaly(() => {\r\n          form.reset();\r\n        });\r\n    });\r\n  }\r\n  function showThanksModal(message) {\r\n    const prevModalDialog = document.querySelector('.modal__dialog');\r\n    prevModalDialog.classList.add('hide');\r\n    openModal();\r\n    const thanksModal = document.createElement('div');\r\n    thanksModal.classList.add('modal__dialog');\r\n    thanksModal.innerHTML = `\r\n        <div class=\"modal__content\">\r\n          <div class=\"modal__close\" data-close>&times;</div>\r\n          <div class=\"modal__title\">${message}</div>\r\n        </div>\r\n        `;\r\n    document.querySelector('.modal').append(thanksModal);\r\n    setTimeout(() => {\r\n      thanksModal.remove();\r\n      prevModalDialog.classList.add('show');\r\n      prevModalDialog.classList.remove('hide');\r\n      closeModal();\r\n    }, 4000);\r\n  }\r\n\r\n  fetch('http://localhost:3000/menu')\r\n    .then((data) => data.json())\r\n    .then((res) => console.log(res));\r\n}\r\nexport default forms;\r\n","/**\r\n * Модуль для отображения модального окна выбора города России.\r\n *\r\n * После выбора города, значение сохраняется в Local Storage,\r\n * а также обновляется отображение выбранного города на странице.\r\n *\r\n * Структура модального окна соответствует готовым стилям:\r\n * - Основной контейнер: класс \"modal\"\r\n * - При открытии модалки добавляется класс \"show\"\r\n * - Внутри модалки: \"modal__dialog\"\r\n * - Внутри диалога: \"modal__content\"\r\n * - Элемент для закрытия: <div data-close=\"\" class=\"modal__close\">×</div>\r\n * - Заголовок модального окна: <div class=\"modal__title\">Выберите город</div>\r\n *\r\n * Использование:\r\n * Импортируйте модуль и вызовите функцию initCityModal().\r\n *\r\n * Пример:\r\n * import initCityModal from './location.js';\r\n * initCityModal();\r\n */ // Файл: js/modules/auth.js\r\n// Описание: Модуль для управления модальным окном авторизации/регистрации.\r\n// Исправлена проблема двойного открытия модалки за счет предотвращения повторной инициализации и контроля автооткрытия.\r\nfunction initCityModal() {\r\n  // Элемент для отображения выбранного города (например, в header)\r\n  const locationText = document.querySelector('#location-text');\r\n\r\n  // Если город уже выбран (сохранён в localStorage), обновляем его отображение\r\n  const savedCity = localStorage.getItem('selectedCity');\r\n  if (savedCity && locationText) {\r\n    locationText.textContent = savedCity;\r\n  }\r\n\r\n  // Элемент, при клике на который открывается модальное окно выбора города.\r\n  // В данном примере предполагается, что у него id=\"city\"\r\n  const cityButton = document.getElementById('city');\r\n  if (!cityButton) {\r\n    console.error('Элемент для выбора города (#city) не найден!');\r\n    return;\r\n  }\r\n\r\n  // Создаём модальное окно, если оно ещё не добавлено в документ.\r\n  // Добавляем дополнительный класс \"city-modal\" для удобной идентификации.\r\n  let modal = document.querySelector('.city-modal');\r\n  if (!modal) {\r\n    modal = document.createElement('div');\r\n    modal.classList.add('modal', 'city-modal');\r\n    modal.innerHTML = `\r\n      <div class=\"modal__dialog\">\r\n        <div class=\"modal__content\">\r\n          <div data-close class=\"modal__close\">×</div>\r\n          <div class=\"modal__title\">Выберите город</div>\r\n          <ul class=\"city-list\">\r\n            <li class=\"city-item\">Москва</li>\r\n            <li class=\"city-item\">Санкт-Петербург</li>\r\n            <li class=\"city-item\">Новосибирск</li>\r\n            <li class=\"city-item\">Екатеринбург</li>\r\n            <li class=\"city-item\">Казань</li>\r\n            <li class=\"city-item\">Нижний Новгород</li>\r\n            <li class=\"city-item\">Челябинск</li>\r\n            <li class=\"city-item\">Омск</li>\r\n            <li class=\"city-item\">Самара</li>\r\n            <li class=\"city-item\">Воронеж</li>\r\n            <li class=\"city-item\">Ростов-на-Дону</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    `;\r\n    document.body.appendChild(modal);\r\n  }\r\n\r\n  // Функция для открытия модального окна\r\n  const openModal = () => modal.classList.add('show');\r\n\r\n  // Функция для закрытия модального окна\r\n  const closeModal = () => modal.classList.remove('show');\r\n\r\n  // При клике на кнопку выбора города открываем модальное окно\r\n  cityButton.addEventListener('click', openModal);\r\n\r\n  // Обработчик закрытия модального окна:\r\n  // - При клике на элемент с атрибутом data-close (иконка закрытия)\r\n  // - Или при клике вне области диалога (на сам контейнер модального окна)\r\n  modal.addEventListener('click', (event) => {\r\n    if (event.target.hasAttribute('data-close') || event.target === modal) {\r\n      closeModal();\r\n    }\r\n  });\r\n\r\n  // Назначаем обработчики клика для каждого элемента списка городов.\r\n  // При выборе города:\r\n  // 1. Сохраняем выбранный город в localStorage.\r\n  // 2. Обновляем отображение выбранного города в элементе locationText.\r\n  // 3. Закрываем модальное окно.\r\n  const cityItems = modal.querySelectorAll('.city-item');\r\n  cityItems.forEach((item) => {\r\n    item.addEventListener('click', () => {\r\n      const selectedCity = item.textContent.trim();\r\n      localStorage.setItem('selectedCity', selectedCity);\r\n      if (locationText) {\r\n        locationText.textContent = selectedCity;\r\n      }\r\n      closeModal();\r\n    });\r\n  });\r\n}\r\n\r\nexport default initCityModal;\r\n","/*\r\n * Функция menuCardSlider отвечает за создание горизонтального слайдера для карточек.\r\n * При этом реализована инерционная прокрутка и обработка событий мыши и касаний для мобильных устройств.\r\n */\r\nfunction menuCardSlider(cardContainerOpt) {\r\n  // Определяем элемент контейнера карточек. Если передан аргумент, используем его, иначе ищем элемент с классом.\r\n  let cardContainer =\r\n    cardContainerOpt || document.querySelector('.tabcontent__bot-cards');\r\n\r\n  // Если контейнер не найден, прекращаем выполнение.\r\n  if (!cardContainer) return;\r\n\r\n  // Переменные для работы с мышью\r\n  let isDown = false; // Флаг удержания кнопки мыши\r\n  let startX; // Начальная позиция по X при нажатии мыши\r\n  let scrollLeft; // Начальная позиция скролла контейнера\r\n  let velocity = 0; // Переменная для хранения скорости при инерционной прокрутке\r\n\r\n  // Обработчик нажатия мыши\r\n  const handleMouseDown = (e) => {\r\n    isDown = true;\r\n    startX = e.pageX - cardContainer.offsetLeft; // Запоминаем относительную позицию курсора\r\n    scrollLeft = cardContainer.scrollLeft; // Сохраняем начальное положение прокрутки\r\n    velocity = 0; // Сброс скорости при новом начале перетаскивания\r\n    cardContainer.style.cursor = 'grabbing'; // Изменяем курсор для визуальной обратной связи\r\n  };\r\n\r\n  // Обработчик движения мыши\r\n  const handleMouseMove = (e) => {\r\n    if (!isDown) return;\r\n    e.preventDefault(); // Отменяем стандартное поведение для предотвращения выделения текста\r\n    const x = e.pageX - cardContainer.offsetLeft;\r\n    const walk = (x - startX) * 2; // Вычисляем пройденное расстояние с коэффициентом для усиления эффекта\r\n    velocity = walk; // Обновляем скорость перетаскивания\r\n    cardContainer.scrollLeft = scrollLeft - walk; // Обновление скролла контейнера на основании пройденного расстояния\r\n  };\r\n\r\n  // Обработчик завершения работы с мышью (отпускание кнопки или уход курсора за окно)\r\n  const handleMouseUpOrLeave = () => {\r\n    isDown = false;\r\n    cardContainer.style.cursor = 'grab'; // Возвращаем курсор к исходному виду\r\n    beginScrollDeceleration(); // Запускаем инерционную прокрутку после отпуска мыши\r\n  };\r\n\r\n  // Функция инерционной прокрутки для мыши\r\n  const beginScrollDeceleration = () => {\r\n    if (Math.abs(velocity) < 0.5) return; // Если скорость мала, прекращаем анимацию\r\n    velocity *= 0.95; // Замедляем скорость (коэффициент замедления)\r\n    cardContainer.scrollLeft -= velocity; // Продолжаем сдвигать контейнер\r\n    requestAnimationFrame(beginScrollDeceleration); // Рекурсивно вызываем функцию для плавной анимации\r\n  };\r\n\r\n  // Добавляем события мыши к контейнеру и окну\r\n  cardContainer.addEventListener('mousedown', handleMouseDown);\r\n  window.addEventListener('mousemove', handleMouseMove);\r\n  window.addEventListener('mouseup', handleMouseUpOrLeave);\r\n  window.addEventListener('mouseleave', handleMouseUpOrLeave);\r\n  cardContainer.style.cursor = 'grab'; // Изначальный стиль курсора\r\n\r\n  // Переменные для обработки событий касания (touch)\r\n  let isTouching = false; // Флаг активации касания\r\n  let touchStartX; // Начальная координата X для касания\r\n  let touchStartY; // Начальная координата Y для касания\r\n  let touchScrollLeft; // Начальное положение прокрутки для касания\r\n  let touchVelocity = 0; // Скорость движения при касании\r\n  let isScrolling; // Флаг для определения, идет вертикальная прокрутка (true) или горизонтальная (false)\r\n\r\n  // Обработчик начала касания\r\n  const handleTouchStart = (e) => {\r\n    isTouching = true;\r\n    isScrolling = undefined; // Сброс определения направления движения\r\n    touchStartX = e.touches[0].pageX - cardContainer.offsetLeft; // Сохраняем относительную координату X\r\n    touchStartY = e.touches[0].pageY; // Сохраняем координату Y\r\n    touchScrollLeft = cardContainer.scrollLeft; // Запоминаем начальный скролл\r\n    touchVelocity = 0; // Сброс скорости\r\n  };\r\n\r\n  // Обработчик движения при касании\r\n  const handleTouchMove = (e) => {\r\n    if (!isTouching) return;\r\n    const currentX = e.touches[0].pageX - cardContainer.offsetLeft;\r\n    const currentY = e.touches[0].pageY;\r\n    const deltaX = currentX - touchStartX;\r\n    const deltaY = currentY - touchStartY;\r\n\r\n    // Определяем направление движения при первом событии touchmove,\r\n    // сравнивая смещения по вертикали и горизонтали\r\n    if (typeof isScrolling === 'undefined') {\r\n      isScrolling = Math.abs(deltaY) > Math.abs(deltaX);\r\n    }\r\n\r\n    // Если определено, что пользователь свайпает вертикально,\r\n    // не перехватываем событие, чтобы дать возможность прокрутить страницу.\r\n    if (isScrolling) {\r\n      return;\r\n    }\r\n\r\n    // Если движение горизонтальное, предотвращаем стандартное поведение и обрабатываем свайп.\r\n    e.preventDefault();\r\n    const walk = deltaX * 2; // Расчет расстояния с усилителем\r\n    touchVelocity = walk; // Обновляем скорость касания\r\n    cardContainer.scrollLeft = touchScrollLeft - walk; // Обновляем положение скролла\r\n  };\r\n\r\n  // Обработчик завершения касания\r\n  const handleTouchEnd = () => {\r\n    isTouching = false;\r\n    beginTouchDeceleration(); // Запускаем инерционную прокрутку для касания\r\n  };\r\n\r\n  // Функция инерционной прокрутки для касания\r\n  const beginTouchDeceleration = () => {\r\n    if (Math.abs(touchVelocity) < 0.5) return; // Если скорость мала, прекращаем анимацию\r\n    touchVelocity *= 0.95; // Замедляем скорость\r\n    cardContainer.scrollLeft -= touchVelocity; // Обновляем позицию скролла\r\n    requestAnimationFrame(beginTouchDeceleration); // Рекурсивный вызов для плавной анимации\r\n  };\r\n\r\n  // Добавляем события касания к контейнеру с указанием passive: false, чтобы можно было вызвать e.preventDefault()\r\n  cardContainer.addEventListener('touchstart', handleTouchStart);\r\n  cardContainer.addEventListener('touchmove', handleTouchMove, {\r\n    passive: false,\r\n  });\r\n  cardContainer.addEventListener('touchend', handleTouchEnd);\r\n\r\n  // Возвращаем функцию для удаления всех обработчиков событий при необходимости очистки\r\n  return () => {\r\n    cardContainer.removeEventListener('mousedown', handleMouseDown);\r\n    window.removeEventListener('mousemove', handleMouseMove);\r\n    window.removeEventListener('mouseup', handleMouseUpOrLeave);\r\n    window.removeEventListener('mouseleave', handleMouseUpOrLeave);\r\n\r\n    cardContainer.removeEventListener('touchstart', handleTouchStart);\r\n    cardContainer.removeEventListener('touchmove', handleTouchMove);\r\n    cardContainer.removeEventListener('touchend', handleTouchEnd);\r\n  };\r\n}\r\n\r\nexport default menuCardSlider;\r\n","//TODO: убрать засорение глобальной области видимости\r\nlet openModal;\r\nlet closeModal;\r\nfunction modal(triggerSelector, modalSelector, closeSelector) {\r\n  function initModal() {\r\n    const trigger = document.querySelectorAll(triggerSelector); //кнопка открытия\r\n    const modal = document.querySelector(modalSelector); // модальное окно\r\n    const close = document.querySelector(closeSelector); // кнопка закрытия\r\n\r\n    // Открытие модального окна и добавление обработчика `keydown`\r\n    openModal = () => {\r\n      if (document.body.classList.contains('no-scroll')) {\r\n        return;\r\n      } else {\r\n        modal.classList.add('show');\r\n        document.addEventListener('keydown', onEscapePress);\r\n        document.body.classList.add('no-scroll');\r\n        clearInterval(timerModal);\r\n      }\r\n    };\r\n\r\n    // Закрытие модального окна и удаление обработчика `keydown`\r\n    closeModal = () => {\r\n      modal.classList.remove('show');\r\n      document.removeEventListener('keydown', onEscapePress);\r\n      document.body.classList.remove('no-scroll');\r\n    };\r\n\r\n    // Обработчик для закрытия модального окна по клавише Escape\r\n    const onEscapePress = (event) => {\r\n      if (event.key === 'Escape') {\r\n        event.preventDefault();\r\n        closeModal();\r\n      }\r\n    };\r\n\r\n    // Открытие модального окна по клику на кнопки с атрибутом data-modal\r\n    trigger.forEach((button) => button.addEventListener('click', openModal));\r\n\r\n    // Закрытие модального окна по клику на кнопку с атрибутом data-close\r\n    close.addEventListener('click', closeModal);\r\n\r\n    // Закрытие модального окна по клику вне его содержимого\r\n    modal.addEventListener('click', (event) => {\r\n      if (event.target === modal || event.target.getAttribute(close === '')) {\r\n        closeModal();\r\n      }\r\n    });\r\n\r\n    // Вызов modal по истечению 50с\r\n    let timerModal = setTimeout(openModal, 40000);\r\n\r\n    // вызов modal на конце страницы\r\n    //TODO: Сделать запрет на повторное срабатывание в течении определенного времени\r\n    //TODO: рефрактор с использованием Intersection Observer api\r\n    function showModalOnEndOfPage() {\r\n      const scrollPosition = window.scrollY + window.innerHeight;\r\n      const documentHeight = document.body.offsetHeight;\r\n\r\n      if (scrollPosition >= documentHeight) {\r\n        openModal();\r\n        window.removeEventListener('scroll', showModalOnEndOfPage);\r\n      }\r\n    }\r\n    window.addEventListener('scroll', showModalOnEndOfPage);\r\n  }\r\n\r\n  initModal();\r\n}\r\nexport default modal;\r\nexport { modal, openModal, closeModal };\r\n","/**\r\n * Функция для перемещения контента между элементами в зависимости от разрешения окна.\r\n *\r\n * @param {number} slideIndex - Индекс слайда для формирования селекторов элементов.\r\n * @param {string} elementBase - Базовый селектор для элемента-источника контента (по умолчанию '.offer__descr-right').\r\n * @param {string} wrapperBase - Базовый селектор для целевого элемента заполнения контентом (по умолчанию '.offer__descr-left').\r\n * @param {number} breakpoint - Точка останова (в пикселях), при которой происходит перенос контента (по умолчанию 768).\r\n */\r\nexport default function insertContent(\r\n  slideIndex,\r\n  elementBase = '.offer__descr-right',\r\n  wrapperBase = '.offer__descr-left',\r\n  breakpoint = 768,\r\n) {\r\n  // Формирование селекторов для поиска элементов по индексам\r\n  const elementSelector = `${elementBase}--${slideIndex}`;\r\n  const wrapperSelector = `${wrapperBase}--${slideIndex}`;\r\n\r\n  // Поиск оригинального и целевого элементов в DOM\r\n  const originalParent = document.querySelector(elementSelector);\r\n  const targetParent = document.querySelector(wrapperSelector);\r\n\r\n  // Массив для хранения изначального содержимого оригинального элемента\r\n  const originalContent = [];\r\n\r\n  // Сохраняем все дочерние узлы оригинального элемента для последующего восстановления\r\n  if (originalParent) {\r\n    originalContent.push(...originalParent.childNodes);\r\n  }\r\n\r\n  /**\r\n   * Функция перемещения контента для мобильного разрешения.\r\n   * При ширине окна <= breakpoint переносит все дочерние элементы из оригинального блока в целевой.\r\n   * При увеличении окна восстанавливает исходное содержимое.\r\n   */\r\n  function moveContentForMobile() {\r\n    // Обращаемся к DOM-элементам по сформированным селекторам\r\n    const descrLeft = document.querySelector(wrapperSelector);\r\n    const descrRight = document.querySelector(elementSelector);\r\n\r\n    // Если экран имеет ширину меньше или равную breakpoint, переносим контент из правого блока в левый\r\n    if (window.matchMedia(`(max-width: ${breakpoint}px)`).matches) {\r\n      if (descrRight && descrLeft) {\r\n        // Перенос всех дочерних элементов из descrRight в descrLeft\r\n        while (descrRight.firstChild) {\r\n          descrLeft.appendChild(descrRight.firstChild);\r\n        }\r\n      }\r\n    } else {\r\n      // При увеличении окна возвращаем исходное содержимое обратно в оригинальный блок\r\n      if (descrRight && originalContent.length > 0) {\r\n        originalContent.forEach((node) => {\r\n          descrRight.appendChild(node);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Первоначальный вызов функции для корректной инициализации содержимого\r\n  moveContentForMobile();\r\n\r\n  /**\r\n   * Функция-обертка debounce для ограничения частоты вызова функции.\r\n   * @param {Function} func - Функция, которую требуется ограничить.\r\n   * @param {number} wait - Задержка в миллисекундах.\r\n   * @returns {Function} - Обёрнутая функция с механизмом debounce.\r\n   */\r\n  function debounce(func, wait) {\r\n    let timeout;\r\n    return function (...args) {\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(() => func.apply(this, args), wait);\r\n    };\r\n  }\r\n\r\n  // Добавляем обработчик события изменения размера окна с использованием debounce\r\n  window.addEventListener('resize', debounce(moveContentForMobile, 100));\r\n}\r\n","// replaceImg.js\r\n\r\n/**\r\n * Функция для замены изображения в элементе в зависимости от его активного состояния.\r\n *\r\n * @param {string} containerSelector - Селектор родительского контейнера.\r\n * @param {string} itemClass - Класс элемента, содержащего изображение.\r\n * @param {string} activeClass - Класс, обозначающий активное состояние элемента.\r\n */\r\nfunction replaceImg(containerSelector, itemClass, activeClass) {\r\n  // Выбираем родительский контейнер по селектору\r\n  const container = document.querySelector(containerSelector);\r\n\r\n  if (!container) {\r\n    console.error(`Контейнер с селектором \"${containerSelector}\" не найден.`);\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Функция для обновления изображений в элементах внутри контейнера.\r\n   * Если элемент содержит класс activeClass, используется активное изображение,\r\n   * иначе подставляется стандартное изображение.\r\n   */\r\n  function updateImages() {\r\n    // Выбираем все элементы с указанным классом внутри контейнера\r\n    const items = container.querySelectorAll(`.${itemClass}`);\r\n    items.forEach((item) => {\r\n      const img = item.querySelector('img');\r\n      if (img) {\r\n        // Получаем пути к изображениям из data-атрибутов\r\n        const newSrc = item.dataset.img;\r\n        const activeSrc = item.dataset.activeImg;\r\n        // Определяем, имеет ли элемент активное состояние\r\n        const isActive = item.classList.contains(activeClass);\r\n        // Устанавливаем src изображения в зависимости от состояния элемента\r\n        img.src = isActive ? activeSrc : newSrc;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Здесь можно добавить обработчик события на родительский контейнер, если требуется:\r\n  // Например, при клике обновлять изображения для элементов,\r\n  // убедившись, что клик произошёл по элементу с нужным классом:\r\n  //\r\n  // container.addEventListener('click', (event) => {\r\n  //   if (event.target.closest(`.${itemClass}`)) {\r\n  //     updateImages();\r\n  //   }\r\n  // });\r\n\r\n  // Обновляем изображения для всех элементов сразу\r\n  updateImages();\r\n}\r\n\r\nexport default replaceImg;\r\n","import { openModal, closeModal } from './modal.js';\r\n\r\n/**\r\n * Функция для работы с отзывами.\r\n * Управляет рейтингом, загрузкой фото, валидацией формы и отправкой данных отзыва.\r\n *\r\n * @returns {object} Объект с методом cleanup для удаления обработчиков событий.\r\n */\r\nfunction reviews() {\r\n  const elements = {\r\n    ratingContainer: document.getElementById('ratingStars'),\r\n    fileInput: document.getElementById('userPhoto'),\r\n    form: document.getElementById('reviewForm'),\r\n    nameInput: document.querySelector('#userName'),\r\n    reviewText: document.querySelector('#reviewText'),\r\n  };\r\n\r\n  if (!elements.ratingContainer || !elements.fileInput || !elements.form) {\r\n    console.warn('Не найдены необходимые элементы');\r\n    return;\r\n  }\r\n\r\n  let selectedRating = 0;\r\n  const MAX_REVIEW_LENGTH = 500;\r\n\r\n  // Инициализация обработчиков событий\r\n  initializeEventListeners();\r\n\r\n  /**\r\n   * Инициализирует обработчики событий для элементов формы отзыва.\r\n   */\r\n  function initializeEventListeners() {\r\n    // Обработчик клика по звездам рейтинга\r\n    elements.ratingContainer.addEventListener('click', handleRatingClick);\r\n    // Обработчик наведения мыши на звезды рейтинга\r\n    elements.ratingContainer.addEventListener('mouseover', handleRatingHover);\r\n    // Обработчик ухода мыши с контейнера рейтинга: возвращает звезды в состояние выбранного рейтинга\r\n    elements.ratingContainer.addEventListener('mouseleave', () =>\r\n      updateStars(selectedRating),\r\n    );\r\n\r\n    // Обработчик изменения файла в поле загрузки фото\r\n    elements.fileInput.addEventListener('change', (e) =>\r\n      handleFile(e.target.files[0]),\r\n    );\r\n\r\n    // Обработчик отправки формы\r\n    elements.form.addEventListener('submit', handleFormSubmit);\r\n  }\r\n\r\n  /**\r\n   * Обработчик клика по звездам рейтинга.\r\n   *\r\n   * @param {MouseEvent} e - Событие клика.\r\n   */\r\n  function handleRatingClick(e) {\r\n    if (e.target.matches('i')) {\r\n      selectedRating = parseInt(e.target.dataset.rating);\r\n      updateStars(selectedRating);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Обработчик наведения мыши на звезды рейтинга.\r\n   *\r\n   * @param {MouseEvent} e - Событие наведения.\r\n   */\r\n  function handleRatingHover(e) {\r\n    if (e.target.matches('i')) {\r\n      updateStars(parseInt(e.target.dataset.rating));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Обновляет отображение звезд рейтинга.\r\n   *\r\n   * @param {number} rating - Текущий рейтинг.\r\n   */\r\n  function updateStars(rating) {\r\n    const stars = elements.ratingContainer.querySelectorAll('i');\r\n    stars.forEach((star, index) => {\r\n      star.classList.toggle('active', index < rating);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Инициализирует зону перетаскивания для загрузки изображения.\r\n   */\r\n  function initializeDropZone() {\r\n    const dropZone = document.createElement('div');\r\n    dropZone.className = 'drop-zone';\r\n    dropZone.innerHTML = '<p>Перетащите изображение сюда или выберите файл</p>';\r\n    elements.fileInput.parentElement.appendChild(dropZone);\r\n\r\n    // Обработчик события dragover для зоны перетаскивания\r\n    dropZone.addEventListener('dragover', (e) => {\r\n      e.preventDefault();\r\n      dropZone.classList.add('drop-zone--over');\r\n    });\r\n\r\n    // Обработчик события dragleave для зоны перетаскивания\r\n    dropZone.addEventListener('dragleave', () => {\r\n      dropZone.classList.remove('drop-zone--over');\r\n    });\r\n\r\n    // Обработчик события drop для зоны перетаскивания\r\n    dropZone.addEventListener('drop', handleDrop);\r\n  }\r\n  // Инициализация зоны перетаскивания\r\n  initializeDropZone();\r\n\r\n  /**\r\n   * Обрабатывает событие drop (перетаскивание файла) в зоне загрузки.\r\n   *\r\n   * @param {DragEvent} e - Событие перетаскивания.\r\n   */\r\n  function handleDrop(e) {\r\n    e.preventDefault();\r\n    e.currentTarget.classList.remove('drop-zone--over');\r\n\r\n    const files = e.dataTransfer.files;\r\n    if (files.length) {\r\n      const file = files[0];\r\n      if (isValidImageFile(file)) {\r\n        updateFileInput(file);\r\n        handleFile(file);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Проверяет, является ли переданный файл допустимым изображением.\r\n   *\r\n   * @param {File} file - Файл для проверки.\r\n   * @returns {boolean} Истина, если файл является изображением.\r\n   */\r\n  function isValidImageFile(file) {\r\n    return file && file.type.startsWith('image/');\r\n  }\r\n\r\n  /**\r\n   * Обновляет значение input для файла с использованием DataTransfer.\r\n   *\r\n   * @param {File} file - Файл для установки.\r\n   */\r\n  function updateFileInput(file) {\r\n    const dataTransfer = new DataTransfer();\r\n    dataTransfer.items.add(file);\r\n    elements.fileInput.files = dataTransfer.files;\r\n  }\r\n\r\n  /**\r\n   * Создает предпросмотр изображения.\r\n   *\r\n   * @param {HTMLElement} container - Контейнер для предпросмотра.\r\n   * @param {string} imageUrl - URL изображения для предпросмотра.\r\n   * @returns {HTMLElement} Элемент предпросмотра.\r\n   */\r\n  function createImagePreview(container, imageUrl) {\r\n    const fragment = document.createDocumentFragment();\r\n    const preview = document.createElement('div');\r\n    preview.className = 'form__preview';\r\n\r\n    const img = document.createElement('img');\r\n    img.src = imageUrl;\r\n    img.alt = 'Предпросмотр';\r\n\r\n    const removeButton = document.createElement('button');\r\n    removeButton.type = 'button';\r\n    removeButton.className = 'form__preview-remove';\r\n    removeButton.textContent = '×';\r\n\r\n    preview.appendChild(img);\r\n    preview.appendChild(removeButton);\r\n    fragment.appendChild(preview);\r\n\r\n    // Если уже существует предпросмотр, удаляем его\r\n    const existingPreview = container.querySelector('.form__preview');\r\n    if (existingPreview) existingPreview.remove();\r\n\r\n    // Обработчик удаления предпросмотра\r\n    removeButton.addEventListener('click', () => {\r\n      preview.remove();\r\n      elements.fileInput.value = '';\r\n    });\r\n\r\n    container.appendChild(fragment);\r\n    return preview;\r\n  }\r\n\r\n  /**\r\n   * Обрабатывает выбранный файл, создавая предпросмотр изображения.\r\n   *\r\n   * @param {File} file - Выбранный файл.\r\n   */\r\n  function handleFile(file) {\r\n    if (!isValidImageFile(file)) return;\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      createImagePreview(elements.fileInput.parentElement, e.target.result);\r\n    };\r\n    reader.readAsDataURL(file);\r\n  }\r\n\r\n  /**\r\n   * Обрабатывает отправку формы отзыва.\r\n   *\r\n   * @param {Event} e - Событие отправки формы.\r\n   */\r\n  async function handleFormSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    if (!validateForm()) return;\r\n\r\n    const statusMessage = showLoadingSpinner();\r\n\r\n    try {\r\n      const reviewData = {\r\n        name: elements.nameInput.value,\r\n        text: elements.reviewText.value,\r\n        rating: selectedRating,\r\n      };\r\n\r\n      const response = await fetch('http://localhost:3000/reviews', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(reviewData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ошибка! статус: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      if (!data.success) {\r\n        throw new Error('Не удалось отправить отзыв');\r\n      }\r\n\r\n      showThanksModal('Спасибо! Ваш отзыв отправлен');\r\n    } catch (error) {\r\n      console.error('Ошибка отправки формы:', error);\r\n      showThanksModal('Что-то пошло не так...');\r\n    } finally {\r\n      cleanupAfterSubmission(statusMessage);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Проверяет корректность заполнения формы.\r\n   *\r\n   * @returns {boolean} Истина, если форма заполнена корректно.\r\n   */\r\n  function validateForm() {\r\n    const { nameInput, reviewText, fileInput } = elements;\r\n\r\n    if (\r\n      !nameInput.value.trim() ||\r\n      !reviewText.value.trim() ||\r\n      !fileInput.files[0]\r\n    ) {\r\n      alert('Пожалуйста, заполните все обязательные поля');\r\n      return false;\r\n    }\r\n\r\n    if (reviewText.value.length > MAX_REVIEW_LENGTH) {\r\n      alert(`Максимальное количество символов: ${MAX_REVIEW_LENGTH}`);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Показывает индикатор загрузки.\r\n   *\r\n   * @returns {HTMLElement} Элемент индикатора загрузки.\r\n   */\r\n  function showLoadingSpinner() {\r\n    const statusMessage = document.createElement('img');\r\n    statusMessage.src = 'img/form/spinner.svg';\r\n    statusMessage.style.cssText = 'display: block; margin: 0 auto;';\r\n    elements.form.insertAdjacentElement('afterend', statusMessage);\r\n    return statusMessage;\r\n  }\r\n\r\n  /**\r\n   * Создает объект с данными формы.\r\n   *\r\n   * @returns {object} Объект с данными формы.\r\n   */\r\n  function createFormData() {\r\n    return {\r\n      name: elements.nameInput.value,\r\n      text: elements.reviewText.value,\r\n      rating: selectedRating,\r\n      photo: elements.fileInput.files[0].name,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Очищает форму и сбрасывает состояние после отправки.\r\n   *\r\n   * @param {HTMLElement} statusMessage - Элемент индикатора загрузки.\r\n   */\r\n  function cleanupAfterSubmission(statusMessage) {\r\n    statusMessage.remove();\r\n    elements.form.reset();\r\n    selectedRating = 0;\r\n    updateStars(0);\r\n    const preview = elements.form.querySelector('.form__preview');\r\n    if (preview) preview.remove();\r\n  }\r\n\r\n  /**\r\n   * Отправляет данные методом POST.\r\n   *\r\n   * @param {string} url - URL для отправки данных.\r\n   * @param {object} data - Данные для отправки.\r\n   * @returns {Promise<object>} Ответ сервера в формате JSON.\r\n   */\r\n  async function postData(url, data) {\r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n    return await response.json();\r\n  }\r\n\r\n  /**\r\n   * Показывает модальное окно с сообщением благодарности.\r\n   *\r\n   * @param {string} message - Сообщение для отображения в модальном окне.\r\n   */\r\n  function showThanksModal(message) {\r\n    const prevModalDialog = document.querySelector('.modal__dialog');\r\n    prevModalDialog.classList.add('hide');\r\n    openModal();\r\n\r\n    const thanksModal = document.createElement('div');\r\n    thanksModal.classList.add('modal__dialog');\r\n    thanksModal.innerHTML = `\r\n      <div class=\"modal__content\">\r\n        <div class=\"modal__close\" data-close>&times;</div>\r\n        <div class=\"modal__title\">${message}</div>\r\n      </div>\r\n    `;\r\n\r\n    const closeButton = thanksModal.querySelector('[data-close]');\r\n    closeButton.addEventListener('click', closeModal);\r\n\r\n    document.querySelector('.modal').append(thanksModal);\r\n\r\n    setTimeout(() => {\r\n      thanksModal.remove();\r\n      prevModalDialog.classList.add('show');\r\n      prevModalDialog.classList.remove('hide');\r\n      closeModal();\r\n    }, 4000);\r\n  }\r\n\r\n  /**\r\n   * Функция для удаления обработчиков событий.\r\n   */\r\n  const cleanup = () => {\r\n    elements.ratingContainer.removeEventListener('click', handleRatingClick);\r\n    elements.ratingContainer.removeEventListener(\r\n      'mouseover',\r\n      handleRatingHover,\r\n    );\r\n    elements.ratingContainer.removeEventListener('mouseleave', () =>\r\n      updateStars(selectedRating),\r\n    );\r\n    elements.fileInput.removeEventListener('change', handleFile);\r\n    elements.form.removeEventListener('submit', handleFormSubmit);\r\n  };\r\n\r\n  return {\r\n    cleanup,\r\n  };\r\n}\r\n\r\nexport default reviews;\r\n","function slider() {\r\n  // Простой слайдер // Для рабоыт удалить offer__slider-inner\r\n  // function initSlider() {\r\n  //   const slides = document.querySelectorAll('.offer__slide'),\r\n  //     prev = document.querySelector('.offer__slider-prev'),\r\n  //     next = document.querySelector('.offer__slider-next'),\r\n  //     totalSlides = document.querySelector('#total'),\r\n  //     current = document.querySelector('#current');\r\n  //   let slideIndex = 1;\r\n\r\n  //   if (slides.length < 10) {\r\n  //     totalSlides.textContent = `0${slides.length}`;\r\n  //   } else {\r\n  //     totalSlides.textContent = slides.length;\r\n  //   }\r\n\r\n  //   function showSlides(n) {\r\n  //     if (n > slides.length) {\r\n  //       slideIndex = 1;\r\n  //     }\r\n  //     if (n < 1) {\r\n  //       slideIndex = slides.length;\r\n  //     }\r\n\r\n  //     slides.forEach((slide) => {\r\n  //       slide.style.display = 'none';\r\n  //     });\r\n  //     slides[slideIndex - 1].style.display = 'block';\r\n\r\n  //     if (slides.length < 10) {\r\n  //       current.textContent = `0${slideIndex}`;\r\n  //     } else {\r\n  //       current.textContent = slideIndex;\r\n  //     }\r\n  //   }\r\n\r\n  //   function plusSlides(n) {\r\n  //     showSlides((slideIndex += n));\r\n  //   }\r\n\r\n  //   prev.addEventListener('click', () => {\r\n  //     plusSlides(-1);\r\n  //   });\r\n  //   next.addEventListener('click', () => {\r\n  //     plusSlides(1);\r\n  //   });\r\n\r\n  //   showSlides(slideIndex);\r\n  // }\r\n\r\n  // initSlider();\r\n\r\n  //Carousel\r\n\r\n  function initCarousel() {\r\n    const slides = document.querySelectorAll('.offer__slide'),\r\n      prev = document.querySelector('.offer__slider-prev'),\r\n      next = document.querySelector('.offer__slider-next'),\r\n      totalSlides = document.querySelector('#total'),\r\n      current = document.querySelector('#current'),\r\n      slidesWrapper = document.querySelector('.offer__slider-wrapper'),\r\n      slideField = document.querySelector('.offer__slider-inner'),\r\n      width = window.getComputedStyle(slidesWrapper).width,\r\n      slider = document.querySelector('.offer__slider');\r\n\r\n    function deleteNotDigits(str) {\r\n      return +str.replace(/\\D/g, '');\r\n    }\r\n\r\n    function setSlideIndex(slide) {\r\n      if (slides.length < 10) {\r\n        current.textContent = `0${slide}`;\r\n      } else {\r\n        current.textContent = slide;\r\n      }\r\n    }\r\n\r\n    function setDotsOpacity() {\r\n      dots.forEach((dot) => {\r\n        dot.style.opacity = '.5';\r\n      });\r\n      dots[slideIndex - 1].style.opacity = 1;\r\n    }\r\n\r\n    function setSlideFieldStyle() {\r\n      slideField.style.transform = `translateX(-${offset}px)`;\r\n    }\r\n\r\n    let slideIndex = 1;\r\n    let offset = 0;\r\n\r\n    if (slides.length < 10) {\r\n      totalSlides.textContent = `0${slides.length}`;\r\n      setSlideIndex(slideIndex);\r\n    } else {\r\n      totalSlides.textContent = slides.length;\r\n      setSlideIndex(slideIndex);\r\n    }\r\n\r\n    slideField.style.width = `${100 * slides.length}%`;\r\n    slideField.style.display = 'flex';\r\n    slideField.style.transition = '0.5s all';\r\n\r\n    slidesWrapper.style.overflow = 'hidden';\r\n    slides.forEach((slide) => {\r\n      slide.style.width = width;\r\n    });\r\n\r\n    slider.style.position = 'relative';\r\n    const indicators = document.createElement('ol');\r\n    const dots = [];\r\n    indicators.classList.add('carousel-indicators');\r\n    slider.append(indicators);\r\n\r\n    for (let i = 0; i < slides.length; i++) {\r\n      const dot = document.createElement('li');\r\n      dot.setAttribute('data-slide-to', i + 1);\r\n      dot.classList.add('dot');\r\n      if (i == 0) {\r\n        dot.style.opacity = 1;\r\n      }\r\n      indicators.append(dot);\r\n      dots.push(dot);\r\n    }\r\n\r\n    next.addEventListener('click', () => {\r\n      if (offset == deleteNotDigits(width) * (slides.length - 1)) {\r\n        offset = 0;\r\n      } else {\r\n        offset += deleteNotDigits(width);\r\n      }\r\n      setSlideFieldStyle();\r\n      if (slideIndex == slides.length) {\r\n        slideIndex = 1;\r\n      } else {\r\n        slideIndex++;\r\n      }\r\n      setSlideIndex(slideIndex);\r\n      setDotsOpacity();\r\n    });\r\n\r\n    prev.addEventListener('click', () => {\r\n      if (offset == 0) {\r\n        offset = deleteNotDigits(width) * (slides.length - 1);\r\n      } else {\r\n        offset -= deleteNotDigits(width);\r\n      }\r\n      setSlideFieldStyle();\r\n      if (slideIndex == 1) {\r\n        slideIndex = slides.length;\r\n      } else {\r\n        slideIndex--;\r\n      }\r\n      setSlideIndex(slideIndex);\r\n      setDotsOpacity();\r\n    });\r\n\r\n    dots.forEach((dot) => {\r\n      dot.addEventListener('click', (e) => {\r\n        const slideTo = e.target.getAttribute('data-slide-to');\r\n        slideIndex = slideTo;\r\n        offset = deleteNotDigits(width) * (slideTo - 1);\r\n        setSlideFieldStyle();\r\n        setSlideIndex(slideIndex);\r\n        setDotsOpacity();\r\n      });\r\n    });\r\n  }\r\n\r\n  initCarousel();\r\n}\r\nexport default slider;\r\n","import menuCardSlider from './menuCardSlider';\r\n/**\r\n * Функция для инициализации табов.\r\n * @param {string} tabsItem - CSS селектор для элементов табов.\r\n * @param {string} tabsContentItem - CSS селектор для содержимого табов.\r\n * @param {string} tabsParentItem - CSS селектор для родительского элемента табов.\r\n * @param {string} cardsParentItem - CSS селектор для родительского элемента карточек.\r\n * @param {string} btnDaysItem - CSS селектор для кнопок выбора дней.\r\n */\r\nfunction tabs(\r\n  tabsItem,\r\n  tabsContentItem,\r\n  tabsParentItem,\r\n  cardsParentItem,\r\n  btnDaysItem,\r\n) {\r\n  // Получаем необходимые элементы из DOM\r\n  const tabs = document.querySelectorAll(tabsItem);\r\n  const tabsContent = document.querySelectorAll(tabsContentItem);\r\n  const tabsParent = document.querySelector(tabsParentItem);\r\n  const cardsParent = document.querySelector(cardsParentItem);\r\n  const menuTariff = document.querySelector('.tabcontainer__bot-tariff');\r\n  const menuDays = document.querySelector('.tabcontainer__bot-day');\r\n  const menuPrice = document.querySelector('.price-info');\r\n  const menuKcal = document.querySelector('.tabcontainer__bot-calories');\r\n  const choiseDays = document.querySelector('.tabdays__choise');\r\n  const btnDays = document.querySelectorAll('.tabdays__choise-btn');\r\n  const choiseKcal = document.querySelector('.tabcalories__choise');\r\n  const btnKcal = document.querySelectorAll('.tabcalories__choise-btn');\r\n  const selectBtn = document.querySelectorAll('.menu__item-select');\r\n\r\n  const orderButton = document.querySelector('.tabcontainer__bot-action');\r\n  console.log(selectBtn);\r\n\r\n  let tabIndex = 0;\r\n  let currentDayValue = 1;\r\n  let currentRatioValue;\r\n  let latestOrderData = null;\r\n  let cooldownInterval = null;\r\n  let orderAlertShown = false;\r\n\r\n  if (!tabs.length || !tabsContent.length || !tabsParent || !cardsParent) {\r\n    console.error('Не удалось найти необходимые элементы для табов');\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Скрыть содержимое всех табов и сбросить активное состояние элементов.\r\n   */\r\n  function hideTabsContent() {\r\n    tabsContent.forEach((element) => {\r\n      element.classList.add('hide');\r\n      element.classList.remove('show', 'fade');\r\n    });\r\n    tabs.forEach((element) => {\r\n      element.classList.remove('tabheader__item_active');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Показать содержимое таба по индексу.\r\n   * @param {number} [index=0] - Индекс таба, который нужно отобразить.\r\n   */\r\n  function showTabContent(index = 0) {\r\n    tabsContent[index].classList.add('show', 'fade');\r\n    tabsContent[index].classList.remove('hide');\r\n    tabs[index].classList.add('tabheader__item_active');\r\n\r\n    // Инициализируем слайдер для карточек, если элемент найден\r\n    if (tabsContent[index].querySelector(cardsParentItem)) {\r\n      menuCardSlider(tabsContent[index].querySelector(cardsParentItem));\r\n    }\r\n\r\n    // Если в контенте таба присутствует выбор калорий, выполняем сброс и пересчёт\r\n    const tabcaloriesChoise = tabsContent[index].querySelector(\r\n      '.tabcalories__choise',\r\n    );\r\n    if (tabcaloriesChoise) {\r\n      resetKcal(tabcaloriesChoise);\r\n      resetDays(tabcaloriesChoise);\r\n      currentRatioValue = btnKcal.length > 0 ? btnKcal[0].dataset.ratio : 1.2;\r\n      calcKcal(tabcaloriesChoise, index, currentDayValue);\r\n      calcDays(tabcaloriesChoise, index, currentRatioValue);\r\n      calcTotalPrice(index, currentDayValue, currentRatioValue);\r\n    }\r\n  }\r\n\r\n  // Начальная инициализация табов\r\n  hideTabsContent();\r\n  showTabContent();\r\n\r\n  // Слушатель кастомного события для переключения таба\r\n  tabsParent.addEventListener('tabswitch', (event) => {\r\n    const { dataTab } = event.detail;\r\n    const tabNumber = parseInt(dataTab.replace(/[^0-9]/g, ''), 10);\r\n    tabIndex = tabNumber;\r\n    hideTabsContent();\r\n    showTabContent(tabNumber);\r\n    // calcKcal(choiseKcal, tabNumber);\r\n  });\r\n\r\n  /**\r\n   * Устанавливает обработчик клика для переключения табов.\r\n   */\r\n  function switchTab() {\r\n    tabsParent.addEventListener('click', (event) => {\r\n      const targetElement = event.target.closest(tabsItem);\r\n      if (targetElement) {\r\n        tabs.forEach((item, i) => {\r\n          if (targetElement === item) {\r\n            tabIndex = i;\r\n            hideTabsContent();\r\n            showTabContent(i);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Сброс активного состояния кнопок выбора дней к начальному.\r\n   */\r\n  function resetDays() {\r\n    if (btnDays.length > 0) {\r\n      btnDays.forEach((item) => {\r\n        item.classList.remove('tabdays__choise-btn--active');\r\n      });\r\n      btnDays[0].classList.add('tabdays__choise-btn--active');\r\n      currentDayValue = parseInt(btnDays[0].textContent, 10);\r\n      menuDays.textContent =\r\n        currentDayValue === 1\r\n          ? `${currentDayValue} день`\r\n          : currentDayValue <= 4\r\n            ? `${currentDayValue} дня`\r\n            : `${currentDayValue} дней`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Сброс активного состояния кнопок выбора калорий к начальному.\r\n   */\r\n  function resetKcal() {\r\n    if (btnKcal.length > 0) {\r\n      btnKcal.forEach((item) => {\r\n        item.classList.remove('tabcalories__choise-btn--active');\r\n      });\r\n      btnKcal[0].classList.add('tabcalories__choise-btn--active');\r\n      menuKcal.textContent = `${btnKcal[0].textContent} калорий`;\r\n      currentRatioValue = btnKcal[0].dataset.ratio;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Функция для расчёта дней и обновления цены при выборе дня.\r\n   * @param {Element} tabcaloriesChoise - Элемент выбора калорий.\r\n   * @param {number} tabIndex - Индекс выбранного таба.\r\n   * @param {number} ratio - Текущее соотношение калорий.\r\n   */\r\n  function calcDays(tabcaloriesChoise, tabIndex, ratio) {\r\n    choiseDays.removeEventListener('click', handleChoiseDaysClick);\r\n    /**\r\n     * Обработчик клика по кнопкам выбора дней.\r\n     * @param {MouseEvent} e - Событие клика.\r\n     */\r\n    function handleChoiseDaysClick(e) {\r\n      const target = e.target.closest('.tabdays__choise-btn');\r\n      if (target) {\r\n        btnDays.forEach((item) => {\r\n          item.classList.remove('tabdays__choise-btn--active');\r\n        });\r\n        target.classList.add('tabdays__choise-btn--active');\r\n        currentDayValue = parseInt(target.textContent, 10);\r\n        menuDays.textContent =\r\n          currentDayValue === 1\r\n            ? `${currentDayValue} день`\r\n            : currentDayValue <= 4\r\n              ? `${currentDayValue} дня`\r\n              : `${currentDayValue} дней`;\r\n        calcTotalPrice(tabIndex, currentDayValue, currentRatioValue);\r\n      }\r\n    }\r\n    choiseDays.addEventListener('click', handleChoiseDaysClick);\r\n  }\r\n\r\n  /**\r\n   * Функция для вычисления скидки в зависимости от количества дней.\r\n   * @param {number} days - Количество дней.\r\n   * @returns {number} - Скидка в виде десятичной дроби.\r\n   */\r\n  function calculateDiscount(days) {\r\n    if (days >= 28) {\r\n      menuPrice;\r\n      return 0.2;\r\n    } else if (days >= 20) {\r\n      return 0.15;\r\n    } else if (days >= 14) {\r\n      return 0.1;\r\n    } else if (days >= 10) {\r\n      return 0.07;\r\n    } else if (days >= 7) {\r\n      return 0.05;\r\n    } else if (days >= 5) {\r\n      return 0.03;\r\n    } else if (days >= 2) {\r\n      return 0.01;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Функция для расчёта калорий и обновления цены при выборе калорий.\r\n   * @param {Element} parentSelector - Родительский элемент с выбором калорий.\r\n   * @param {number} tabIndex - Индекс выбранного таба.\r\n   * @param {number} dayValue - Значение выбранного дня.\r\n   */\r\n  function calcKcal(parentSelector, tabIndex, dayValue) {\r\n    // Удаляем предыдущий обработчик для избежания повторных привязок\r\n    parentSelector.removeEventListener('click', handleKcalClick);\r\n\r\n    /**\r\n     * Обработчик клика по кнопкам выбора калорий.\r\n     * @param {MouseEvent} e - Событие клика.\r\n     */\r\n    function handleKcalClick(e) {\r\n      const target = e.target.closest('.tabcalories__choise-btn');\r\n\r\n      if (target) {\r\n        // Сброс активного состояния для всех кнопок выбора калорий внутри текущего таба\r\n        parentSelector\r\n          .querySelectorAll('.tabcalories__choise-btn')\r\n          .forEach((item) => {\r\n            item.classList.remove('tabcalories__choise-btn--active');\r\n          });\r\n\r\n        target.classList.add('tabcalories__choise-btn--active');\r\n        menuKcal.textContent = `${target.textContent} калорий`;\r\n        currentRatioValue = target.dataset.ratio;\r\n        calcTotalPrice(tabIndex, dayValue, currentRatioValue);\r\n        resetDays(); // Сброс выбора дней при изменении калорий\r\n      }\r\n    }\r\n\r\n    parentSelector.addEventListener('click', handleKcalClick);\r\n\r\n    // Первоначальная настройка: активируем первую кнопку и обновляем значения\r\n    const firstKcalButton = parentSelector.querySelector(\r\n      '.tabcalories__choise-btn',\r\n    );\r\n    if (firstKcalButton) {\r\n      firstKcalButton.classList.add('tabcalories__choise-btn--active');\r\n      currentRatioValue = firstKcalButton.dataset.ratio;\r\n      menuKcal.textContent = `${firstKcalButton.textContent} калорий`;\r\n      calcTotalPrice(tabIndex, dayValue, currentRatioValue); // Начальный расчёт цены\r\n    }\r\n  }\r\n\r\n  let lastSendTime = 0; // Хранит время последней успешной отправки\r\n\r\n  /**\r\n   * Функция для отправки данных заказа на сервер.\r\n   * @param {number} tabIndex - Индекс выбранного таба.\r\n   * @param {number} dayValue - Значение выбранного дня.\r\n   * @param {number} ratio - Соотношение калорий.\r\n   */\r\n  function sendOrderData(tabIndex, dayValue, ratio) {\r\n    const currentTime = Date.now();\r\n\r\n    // Проверка, прошло ли 10 секунд с момента последней отправки\r\n    if (currentTime - lastSendTime < 10000) {\r\n      const remainingTime = 10000 - (currentTime - lastSendTime);\r\n      const minutes = Math.floor(remainingTime / 60000);\r\n      const seconds = Math.floor((remainingTime % 60000) / 1000);\r\n\r\n      if (orderButton) {\r\n        orderButton.textContent = `Ожидайте: ${minutes} минут${minutes !== 1 ? 'ы' : ''} ${seconds} секунд${seconds !== 1 ? 'ы' : ''}`;\r\n        cooldownInterval = setInterval(updateCountdown, 1000, remainingTime);\r\n      }\r\n      return;\r\n    }\r\n\r\n    // Сброс текста кнопки\r\n    if (orderButton) {\r\n      orderButton.textContent = 'Оформить заказ';\r\n      clearInterval(cooldownInterval);\r\n    }\r\n\r\n    // Повторная проверка времени отправки\r\n    if (currentTime - lastSendTime < 10000) {\r\n      alert.log('Отправка данных слишком часто. Подождите 10 секунд.');\r\n      return;\r\n    }\r\n\r\n    console.log('Отправка данных:', latestOrderData);\r\n    if (!latestOrderData) return; // Если нет данных, отправка не производится\r\n\r\n    fetch('http://localhost:3000/order', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(latestOrderData),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log('Ответ сервера:', data);\r\n        lastSendTime = Date.now(); // Обновляем время последней отправки\r\n      })\r\n      .catch((error) => {\r\n        console.error('Ошибка отправки:', error);\r\n        // Если отправка не удалась, обновляем время отправки\r\n        lastSendTime = Date.now();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Обновляет обратный отсчёт до возможности следующей отправки заказа.\r\n   * @param {number} remainingTime - Оставшееся время в миллисекундах.\r\n   */\r\n  function updateCountdown(remainingTime) {\r\n    const currentTime = Date.now();\r\n    const timeLeft = remainingTime - (currentTime - lastSendTime);\r\n\r\n    if (timeLeft <= 0) {\r\n      clearInterval(cooldownInterval);\r\n      if (orderButton) {\r\n        orderButton.textContent = 'Оформить заказ';\r\n      }\r\n      return;\r\n    }\r\n\r\n    const minutes = Math.floor(timeLeft / 60000);\r\n    const seconds = Math.floor((timeLeft % 60000) / 1000);\r\n\r\n    if (orderButton) {\r\n      orderButton.textContent = `Ожидайте: ${minutes} минут${minutes !== 1 ? 'ы' : ''} ${seconds} секунд${seconds !== 1 ? 'ы' : ''}`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Обработчик клика по кнопке заказа.\r\n   */\r\n  function handleOrderButton() {\r\n    const user = localStorage.getItem('user');\r\n    if (!user) {\r\n      // Если предупреждение ещё не было показано, выводим его и устанавливаем флаг\r\n      if (!orderAlertShown) {\r\n        alert('Перед заказом, пожалуйста зарегестрируйтесь');\r\n        orderAlertShown = true;\r\n        // Сбрасываем флаг через 1 секунду для возможности повторного предупреждения\r\n        setTimeout(() => {\r\n          orderAlertShown = false;\r\n        }, 1000);\r\n      }\r\n      return;\r\n    }\r\n    // Если пользователь авторизован, отправляем данные заказа.\r\n    sendOrderData(tabIndex, currentDayValue, currentRatioValue);\r\n  }\r\n\r\n  /**\r\n   * Устанавливает обработчик клика для кнопки заказа с актуальными данными.\r\n   */\r\n  function setupOrderButton() {\r\n    if (orderButton) {\r\n      // Удаляем предыдущий обработчик, если он есть, и добавляем новый\r\n      orderButton.removeEventListener('click', handleOrderButton);\r\n      orderButton.addEventListener('click', handleOrderButton);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Функция для расчета итоговой стоимости заказа с учетом выбранного тарифа, дней и скидок.\r\n   * @param {number} tabIndex - Индекс выбранного таба.\r\n   * @param {number} dayValue - Значение выбранного дня.\r\n   * @param {number} ratio - Соотношение калорий.\r\n   */\r\n  function calcTotalPrice(tabIndex, dayValue, ratio) {\r\n    console.log('Приходит в calcTotalPrice');\r\n    console.log(`Таб индекс - ${tabIndex}`);\r\n    console.log(`Значение дня ${dayValue}`);\r\n    console.log(`Ратио калорий - ${ratio}`);\r\n\r\n    const tariffs = ['набор веса', 'баланс', 'похудение'];\r\n    let defaultPrice = 410;\r\n    let price = 0;\r\n\r\n    switch (tabIndex) {\r\n      case 0:\r\n        price = defaultPrice;\r\n        break;\r\n      case 1:\r\n        price = 360;\r\n        break;\r\n      case 2:\r\n        price = 320;\r\n        break;\r\n      default:\r\n        price = defaultPrice;\r\n    }\r\n\r\n    const days = dayValue || 0;\r\n    let totalPrice = days * price * ratio;\r\n    const discount = calculateDiscount(days);\r\n    const discountedPrice = totalPrice * (1 - discount);\r\n    const discountPercentage = Math.round(discount * 100);\r\n\r\n    let discountElement = document.querySelector('.discount-info');\r\n    if (!discountElement) {\r\n      discountElement = document.createElement('div');\r\n      discountElement.classList.add('discount-info');\r\n      menuPrice.parentNode.insertBefore(discountElement, menuPrice);\r\n    }\r\n\r\n    if (discountPercentage > 0) {\r\n      discountElement.textContent = `Скидка ${discountPercentage}%`;\r\n      discountElement.style.display = 'flex';\r\n    } else {\r\n      discountElement.style.display = 'none';\r\n    }\r\n\r\n    menuPrice.textContent = +discountedPrice.toFixed(0) + ' руб.';\r\n\r\n    console.log(`Цена - ${price}`);\r\n    console.log(`Количество дней - ${dayValue}`);\r\n    console.log(`Ратио калорий - ${ratio}`);\r\n    console.log(`Итоговая цена - ${totalPrice}`);\r\n\r\n    // Обновляем глобальную переменную с последними данными заказа\r\n    latestOrderData = {\r\n      тариф: tariffs[tabIndex] || 'неизвестный',\r\n      количество_дней: days,\r\n      цена_без_скидки: totalPrice.toFixed(2),\r\n      размер_скидки: `${discountPercentage}%`,\r\n      итоговая_стоимость: discountedPrice.toFixed(2),\r\n    };\r\n    const userData = localStorage.getItem('user');\r\n    if (userData) {\r\n      const { name, login, email, phone } = JSON.parse(userData);\r\n      latestOrderData = {\r\n        ...latestOrderData,\r\n        name: name,\r\n        login: login,\r\n        email: email,\r\n        phone: phone,\r\n      };\r\n    }\r\n\r\n    setupOrderButton(); // Настраиваем кнопку с актуальными данными\r\n  }\r\n\r\n  // Инициализируем интерфейс табов\r\n  hideTabsContent();\r\n  showTabContent();\r\n  switchTab();\r\n}\r\n\r\nexport default tabs;\r\n","// tabsAndSlider.js\r\nimport insertContent from './moveContent';\r\n/**\r\n * Функция SliderV2 - реализует слайдер с поддержкой навигации по клику, клавиатуре,\r\n * touch-событиями и перетаскиванием мышью.\r\n *\r\n * @param {string} contentSelector - CSS селектор для элементов слайдов.\r\n * @param {string} parentSelector - CSS селектор для родительского элемента слайдов.\r\n * @param {string} sliderPrev - CSS селектор для кнопки переключения на предыдущий слайд.\r\n * @param {string} sliderNext - CSS селектор для кнопки переключения на следующий слайд.\r\n * @param {string} current - CSS селектор для элемента отображения текущего номера слайда.\r\n * @param {string} total - CSS селектор для элемента отображения общего количества слайдов.\r\n */\r\nfunction SliderV2(\r\n  contentSelector,\r\n  parentSelector,\r\n  sliderPrev,\r\n  sliderNext,\r\n  current,\r\n  total,\r\n) {\r\n  // Получение DOM элементов для слайдера\r\n  const tabsContent = document.querySelectorAll(contentSelector);\r\n  const tabsParent = document.querySelector(parentSelector);\r\n  const prev = document.querySelector(sliderPrev);\r\n  const next = document.querySelector(sliderNext);\r\n  const currentCounter = document.querySelector(current);\r\n  const totalCounter = document.querySelector(total);\r\n\r\n  // Локальное состояние слайдера\r\n  let slideIndex = 0;\r\n  let touchStartX = 0;\r\n  let touchEndX = 0;\r\n\r\n  // Проверяем наличие всех необходимых элементов\r\n  if (\r\n    !tabsContent.length ||\r\n    !tabsParent ||\r\n    !prev ||\r\n    !next ||\r\n    !currentCounter ||\r\n    !totalCounter\r\n  ) {\r\n    console.error('Required elements not found');\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Скрывает все слайды.\r\n   */\r\n  function hideContent() {\r\n    tabsContent.forEach((item) => {\r\n      item.classList.add('hide');\r\n      item.classList.remove('show');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Показывает слайд по заданному индексу.\r\n   * @param {number} [index=0] - Индекс слайда для отображения.\r\n   */\r\n  function showContent(index = 0) {\r\n    tabsContent[index].classList.add('show');\r\n    tabsContent[index].classList.remove('hide');\r\n    updateCounter(index);\r\n    // Вызов функции вставки контента для текущего слайда\r\n    insertContent(index);\r\n  }\r\n\r\n  /**\r\n   * Обновляет счетчик текущего слайда и общего количества слайдов.\r\n   * @param {number} index - Индекс текущего слайда.\r\n   */\r\n  function updateCounter(index) {\r\n    currentCounter.textContent = getZero(index + 1);\r\n    totalCounter.textContent = getZero(tabsContent.length);\r\n  }\r\n\r\n  /**\r\n   * Добавляет ведущий ноль к числу, если оно меньше 10.\r\n   * @param {number} num - Число для форматирования.\r\n   * @returns {string|number} - Строка с ведущим нулем или число, если оно больше или равно 10.\r\n   */\r\n  function getZero(num) {\r\n    return num >= 0 && num < 10 ? `0${num}` : num;\r\n  }\r\n\r\n  /**\r\n   * Изменяет слайд в зависимости от направления.\r\n   * @param {string} direction - Направление ('prev' для предыдущего, 'next' для следующего).\r\n   */\r\n  function changeSlide(direction) {\r\n    console.log(`Changing slide: ${direction}`);\r\n    if (direction === 'prev') {\r\n      slideIndex = slideIndex === 0 ? tabsContent.length - 1 : slideIndex - 1;\r\n    } else {\r\n      slideIndex = slideIndex === tabsContent.length - 1 ? 0 : slideIndex + 1;\r\n    }\r\n    console.log(`New slide index: ${slideIndex}`);\r\n    hideContent();\r\n    showContent(slideIndex);\r\n\r\n    // Вызов функции для вставки контента после смены слайда\r\n    insertContent(slideIndex);\r\n  }\r\n\r\n  /**\r\n   * Обработчик нажатия клавиш для переключения слайдера.\r\n   * @param {KeyboardEvent} event - Событие нажатия клавиши.\r\n   */\r\n  function handleKeyPress(event) {\r\n    if (event.key === 'ArrowLeft') {\r\n      changeSlide('prev');\r\n    } else if (event.key === 'ArrowRight') {\r\n      changeSlide('next');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Обработчик начала касания экрана.\r\n   * @param {TouchEvent} event - Событие касания.\r\n   */\r\n  function handleTouchStart(event) {\r\n    touchStartX = event.touches[0].clientX;\r\n    touchEndX = touchStartX;\r\n  }\r\n\r\n  /**\r\n   * Обработчик движения пальца по экрану.\r\n   * @param {TouchEvent} event - Событие перемещения касания.\r\n   */\r\n  function handleTouchMove(event) {\r\n    touchEndX = event.touches[0].clientX;\r\n  }\r\n\r\n  /**\r\n   * Обработчик окончания касания, вычисляет направление свайпа.\r\n   */\r\n  function handleTouchEnd() {\r\n    const swipeDistance = touchEndX - touchStartX;\r\n    const swipeThreshold = 50;\r\n\r\n    if (Math.abs(swipeDistance) > swipeThreshold) {\r\n      changeSlide(swipeDistance < 0 ? 'next' : 'prev');\r\n    }\r\n  }\r\n\r\n  // Переменные для обработки перетаскивания мышью\r\n  let isDragging = false;\r\n  let startX;\r\n\r\n  /**\r\n   * Обработчик нажатия кнопки мыши.\r\n   * @param {MouseEvent} event - Событие нажатия мыши.\r\n   */\r\n  function handleMouseDown(event) {\r\n    isDragging = true;\r\n    startX = event.pageX;\r\n    tabsParent.style.cursor = 'grabbing';\r\n  }\r\n\r\n  /**\r\n   * Обработчик движения мыши при зажатой кнопке.\r\n   * @param {MouseEvent} event - Событие перемещения мыши.\r\n   */\r\n  function handleMouseMove(event) {\r\n    if (!isDragging) return;\r\n\r\n    const x = event.pageX;\r\n    const distance = startX - x;\r\n\r\n    if (Math.abs(distance) > 50) {\r\n      changeSlide(distance > 0 ? 'next' : 'prev');\r\n      isDragging = false;\r\n      tabsParent.style.cursor = 'grab';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Обработчик отпускания кнопки мыши.\r\n   */\r\n  function handleMouseUp() {\r\n    isDragging = false;\r\n    tabsParent.style.cursor = 'grab';\r\n  }\r\n\r\n  // Назначение обработчиков для кнопок и событий\r\n  prev.addEventListener('click', () => changeSlide('prev'));\r\n  next.addEventListener('click', () => changeSlide('next'));\r\n  document.addEventListener('keydown', handleKeyPress);\r\n\r\n  tabsParent.addEventListener('touchstart', handleTouchStart);\r\n  tabsParent.addEventListener('touchmove', handleTouchMove);\r\n  tabsParent.addEventListener('touchend', handleTouchEnd);\r\n\r\n  tabsParent.addEventListener('mousedown', handleMouseDown);\r\n  document.addEventListener('mousemove', handleMouseMove);\r\n  document.addEventListener('mouseup', handleMouseUp);\r\n\r\n  // Установка начального стиля курсора\r\n  tabsParent.style.cursor = 'grab';\r\n\r\n  // Инициализация слайдера: скрываем все слайды и показываем первый\r\n  hideContent();\r\n  showContent();\r\n\r\n  /**\r\n   * Функция для очистки (удаления) обработчиков событий.\r\n   * Возвращает функцию, вызывая которую, можно отменить регистрацию событий.\r\n   * @returns {Function} Функция очистки обработчиков событий.\r\n   */\r\n  return function cleanup() {\r\n    document.removeEventListener('keydown', handleKeyPress);\r\n    tabsParent.removeEventListener('touchstart', handleTouchStart);\r\n    tabsParent.removeEventListener('touchmove', handleTouchMove);\r\n    tabsParent.removeEventListener('touchend', handleTouchEnd);\r\n    tabsParent.removeEventListener('mousedown', handleMouseDown);\r\n    document.removeEventListener('mousemove', handleMouseMove);\r\n    document.removeEventListener('mouseup', handleMouseUp);\r\n  };\r\n}\r\n\r\nexport default SliderV2;\r\n","/**\r\n * Модуль таймера. Инициирует отсчет времени до заданной даты.\r\n * @function timer\r\n */\r\nfunction timer() {\r\n  // TIMER\r\n\r\n  const deadline = '2026-01-01';\r\n\r\n  /**\r\n   * Вычисляет оставшееся время до заданного конечного времени.\r\n   * @param {string} endtime - Конечное время в формате, распознаваемом Date.parse.\r\n   * @returns {Object} Объект с оставшимся временем:\r\n   *                   total - общее количество миллисекунд,\r\n   *                   days - количество дней,\r\n   *                   hours - количество часов,\r\n   *                   minutes - количество минут,\r\n   *                   seconds - количество секунд.\r\n   */\r\n  function getTimeRemaining(endtime) {\r\n    const total = Date.parse(endtime) - Date.parse(new Date());\r\n    const days = Math.floor(total / (1000 * 60 * 60 * 24));\r\n    const hours = Math.floor((total / (1000 * 60 * 60)) % 24);\r\n    const minutes = Math.floor((total / 1000 / 60) % 60) % 60;\r\n    const seconds = Math.floor((total / 1000) % 60);\r\n    return {\r\n      total,\r\n      days,\r\n      hours,\r\n      minutes,\r\n      seconds,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Устанавливает и обновляет счетчики таймера на странице.\r\n   * @param {string} selector - CSS селектор элемента таймера.\r\n   * @param {string} endtime - Конечное время для отсчета.\r\n   */\r\n  function setClock(selector, endtime) {\r\n    const timer = document.querySelector(selector);\r\n    const days = timer.querySelector('#days');\r\n    const hours = timer.querySelector('#hours');\r\n    const minutes = timer.querySelector('#minutes');\r\n    const seconds = timer.querySelector('#seconds');\r\n    let timeInterval = setInterval(updateClock, 1000);\r\n    updateClock();\r\n\r\n    /**\r\n     * Функция обновления счетчиков таймера.\r\n     */\r\n    function updateClock() {\r\n      const t = getTimeRemaining(endtime);\r\n      days.innerHTML = getZero(t.days);\r\n      hours.innerHTML = getZero(t.hours);\r\n      minutes.innerHTML = getZero(t.minutes);\r\n      seconds.innerHTML = getZero(t.seconds);\r\n\r\n      if (total <= 0) {\r\n        clearInterval(timeInterval);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * Форматирует число, добавляя ведущий ноль, если число меньше 10.\r\n   * @param {number} number - Число для форматирования.\r\n   * @returns {string|number} Строка с числом, дополненным нулем, или число.\r\n   */\r\n  function getZero(number) {\r\n    if (number >= 0 && number < 10) {\r\n      return `0${number}`;\r\n    } else {\r\n      return number;\r\n    }\r\n  }\r\n\r\n  setClock('.timer', deadline);\r\n}\r\nexport default timer;\r\n","// extracted by mini-css-extract-plugin\nexport {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.hmd = (module) => {\n\tmodule = Object.create(module);\n\tif (!module.children) module.children = [];\n\tObject.defineProperty(module, 'exports', {\n\t\tenumerable: true,\n\t\tset: () => {\n\t\t\tthrow new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);\n\t\t}\n\t});\n\treturn module;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","'use strict';\r\nimport '../Styles/styles.scss';\r\nimport calc from './modules/calc.js';\r\nimport cards from './modules/cards.js';\r\nimport forms from './modules/forms.js';\r\nimport modal from './modules/modal.js';\r\nimport slider from './modules/slider.js';\r\nimport tabs from './modules/tabs.js';\r\nimport timer from './modules/timer.js';\r\n\r\nimport SliderV2 from './modules/tabsAndSlider.js';\r\nimport menuCardSlider from './modules/menuCardSlider.js';\r\nimport fixedPromo from './modules/fixedPromo';\r\nimport burger from './modules/burger.js';\r\nimport bodyNoScroll from './modules/bodyNoScroll.js';\r\nimport collapsed from './modules/collapsed.js';\r\nimport insertContent from './modules/moveContent';\r\nimport replaceImg from './modules/replaceImg';\r\nimport reviews from './modules/reviews';\r\nimport callMeBack from './modules/callMeBack';\r\n\r\nimport location from './modules/location';\r\nimport auth from './modules/auth';\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  console.log('script js  work');\r\n\r\n  // fixedPromo();\r\n  calc();\r\n  cards();\r\n  forms();\r\n  modal('[data-modal]', '.modal', '[data-close]');\r\n  // slider();\r\n  tabs(\r\n    '.tabheader__item',\r\n    '.tabcontent',\r\n    '.tabheader__items',\r\n    '.tabcontent__bot-cards',\r\n    '.tabdays__choise-btn',\r\n  );\r\n  //TODO:перенести таймер в promo вниз экрана\r\n  //или переделать таймер в отдельное окно\r\n  timer();\r\n  SliderV2(\r\n    '.offer__slide', // изменить на слайды вместо .offer__descr\r\n    '.offer__slider', // изменить на родительский элемент слайдера\r\n    '.prev',\r\n    '.next',\r\n    '#current',\r\n    '#total',\r\n  );\r\n  insertContent();\r\n  // menuCardSlider('.offer__slider-inner');\r\n  menuCardSlider();\r\n  burger();\r\n  collapsed();\r\n  collapsed('.reviews__list', '.reviews .expand');\r\n  collapsed('.questions .questions__item-content', '.questionsExpand', 0);\r\n  insertContent();\r\n  insertContent(0, '.cityMoveElement', '.cityToMoveElement', 425);\r\n  insertContent(0, '.authBtnHeader', '.authBtnBurger', 425);\r\n  replaceImg(\r\n    '.calculating__choose_big',\r\n    'calculating__choose-item',\r\n    'calculating__choose-item_active',\r\n  );\r\n  replaceImg(\r\n    '#gender',\r\n    'calculating__choose-item',\r\n    'calculating__choose-item_active',\r\n  );\r\n  reviews();\r\n  callMeBack();\r\n  // request();\r\n  location();\r\n  auth();\r\n});\r\n"],"names":[],"sourceRoot":""}